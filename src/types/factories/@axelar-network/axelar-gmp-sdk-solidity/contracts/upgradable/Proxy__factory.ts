/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Signer,
  utils,
  Contract,
  ContractFactory,
  BytesLike,
  Overrides,
} from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../../../common";
import type {
  Proxy,
  ProxyInterface,
} from "../../../../../@axelar-network/axelar-gmp-sdk-solidity/contracts/upgradable/Proxy";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "implementationAddress",
        type: "address",
      },
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        internalType: "bytes",
        name: "setupParams",
        type: "bytes",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "AlreadyInitialized",
    type: "error",
  },
  {
    inputs: [],
    name: "InvalidImplementation",
    type: "error",
  },
  {
    inputs: [],
    name: "InvalidOwner",
    type: "error",
  },
  {
    inputs: [],
    name: "NotOwner",
    type: "error",
  },
  {
    inputs: [],
    name: "SetupFailed",
    type: "error",
  },
  {
    stateMutability: "payable",
    type: "fallback",
  },
  {
    inputs: [],
    name: "implementation",
    outputs: [
      {
        internalType: "address",
        name: "implementation_",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "params",
        type: "bytes",
      },
    ],
    name: "setup",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    stateMutability: "payable",
    type: "receive",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b506040516108aa3803806108aa833981810160405281019061003291906104ca565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415610099576040517f49e27cff00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60006100a96102e360201b60201c565b90506000801b811415801561013b5750808473ffffffffffffffffffffffffffffffffffffffff16638291286c6040518163ffffffff1660e01b815260040160206040518083038186803b15801561010057600080fd5b505afa158015610114573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610138919061056f565b14155b15610172576040517f68155f9a00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b837f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc55827f02016836a56b71f0d02689e69e326f4f4c1b9057164ef592671cf0d37c8040c05560008251146102da5760008473ffffffffffffffffffffffffffffffffffffffff16639ded06df60e01b846040516024016101f391906105f1565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505060405161025d919061064f565b600060405180830381855af49150503d8060008114610298576040519150601f19603f3d011682016040523d82523d6000602084013e61029d565b606091505b50509050806102d8576040517f97905dfb00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b505b50505050610666565b60008060001b905090565b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061032d82610302565b9050919050565b61033d81610322565b811461034857600080fd5b50565b60008151905061035a81610334565b92915050565b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6103b38261036a565b810181811067ffffffffffffffff821117156103d2576103d161037b565b5b80604052505050565b60006103e56102ee565b90506103f182826103aa565b919050565b600067ffffffffffffffff8211156104115761041061037b565b5b61041a8261036a565b9050602081019050919050565b60005b8381101561044557808201518184015260208101905061042a565b83811115610454576000848401525b50505050565b600061046d610468846103f6565b6103db565b90508281526020810184848401111561048957610488610365565b5b610494848285610427565b509392505050565b600082601f8301126104b1576104b0610360565b5b81516104c184826020860161045a565b91505092915050565b6000806000606084860312156104e3576104e26102f8565b5b60006104f18682870161034b565b93505060206105028682870161034b565b925050604084015167ffffffffffffffff811115610523576105226102fd565b5b61052f8682870161049c565b9150509250925092565b6000819050919050565b61054c81610539565b811461055757600080fd5b50565b60008151905061056981610543565b92915050565b600060208284031215610585576105846102f8565b5b60006105938482850161055a565b91505092915050565b600081519050919050565b600082825260208201905092915050565b60006105c38261059c565b6105cd81856105a7565b93506105dd818560208601610427565b6105e68161036a565b840191505092915050565b6000602082019050818103600083015261060b81846105b8565b905092915050565b600081905092915050565b60006106298261059c565b6106338185610613565b9350610643818560208601610427565b80840191505092915050565b600061065b828461061e565b915081905092915050565b610235806106756000396000f3fe60806040526004361061002d5760003560e01c80635c60da1b146100665780639ded06df1461009157610034565b3661003457005b600061003e6100ba565b90503660008037600080366000845af43d6000803e8060008114610061573d6000f35b3d6000fd5b34801561007257600080fd5b5061007b6100ba565b6040516100889190610128565b60405180910390f35b34801561009d57600080fd5b506100b860048036038101906100b391906101b2565b6100e3565b005b60007f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc54905090565b5050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610112826100e7565b9050919050565b61012281610107565b82525050565b600060208201905061013d6000830184610119565b92915050565b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b60008083601f8401126101725761017161014d565b5b8235905067ffffffffffffffff81111561018f5761018e610152565b5b6020830191508360018202830111156101ab576101aa610157565b5b9250929050565b600080602083850312156101c9576101c8610143565b5b600083013567ffffffffffffffff8111156101e7576101e6610148565b5b6101f38582860161015c565b9250925050925092905056fea26469706673582212200cfbe38b42453f2d574c9eff54dfe729e76483608f91da48ba306fe1ae928c1464736f6c63430008090033";

type ProxyConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ProxyConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Proxy__factory extends ContractFactory {
  constructor(...args: ProxyConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    implementationAddress: PromiseOrValue<string>,
    owner: PromiseOrValue<string>,
    setupParams: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<Proxy> {
    return super.deploy(
      implementationAddress,
      owner,
      setupParams,
      overrides || {}
    ) as Promise<Proxy>;
  }
  override getDeployTransaction(
    implementationAddress: PromiseOrValue<string>,
    owner: PromiseOrValue<string>,
    setupParams: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(
      implementationAddress,
      owner,
      setupParams,
      overrides || {}
    );
  }
  override attach(address: string): Proxy {
    return super.attach(address) as Proxy;
  }
  override connect(signer: Signer): Proxy__factory {
    return super.connect(signer) as Proxy__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ProxyInterface {
    return new utils.Interface(_abi) as ProxyInterface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): Proxy {
    return new Contract(address, _abi, signerOrProvider) as Proxy;
  }
}
