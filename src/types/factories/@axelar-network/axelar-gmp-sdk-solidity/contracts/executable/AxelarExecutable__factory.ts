/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../../../common";
import type {
  AxelarExecutable,
  AxelarExecutableInterface,
} from "../../../../../@axelar-network/axelar-gmp-sdk-solidity/contracts/executable/AxelarExecutable";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "gateway_",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "InvalidAddress",
    type: "error",
  },
  {
    inputs: [],
    name: "NotApprovedByGateway",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "commandId",
        type: "bytes32",
      },
      {
        internalType: "string",
        name: "sourceChain",
        type: "string",
      },
      {
        internalType: "string",
        name: "sourceAddress",
        type: "string",
      },
      {
        internalType: "bytes",
        name: "payload",
        type: "bytes",
      },
    ],
    name: "execute",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "commandId",
        type: "bytes32",
      },
      {
        internalType: "string",
        name: "sourceChain",
        type: "string",
      },
      {
        internalType: "string",
        name: "sourceAddress",
        type: "string",
      },
      {
        internalType: "bytes",
        name: "payload",
        type: "bytes",
      },
      {
        internalType: "string",
        name: "tokenSymbol",
        type: "string",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "executeWithToken",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "gateway",
    outputs: [
      {
        internalType: "contract IAxelarGateway",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60a060405234801561001057600080fd5b50604051610a7e380380610a7e83398181016040528101906100329190610136565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610099576040517fe6c4247b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff168152505050610163565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610103826100d8565b9050919050565b610113816100f8565b811461011e57600080fd5b50565b6000815190506101308161010a565b92915050565b60006020828403121561014c5761014b6100d3565b5b600061015a84828501610121565b91505092915050565b6080516108f461018a60003960008181609e0152818160de015261020901526108f46000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c8063116191b6146100465780631a98b2e0146100645780634916065814610080575b600080fd5b61004e61009c565b60405161005b919061039c565b60405180910390f35b61007e600480360381019061007991906104e8565b6100c0565b005b61009a600480360381019061009591906105f8565b6101eb565b005b7f000000000000000000000000000000000000000000000000000000000000000081565b600085856040516100d2929190610700565b604051809103902090507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16631876eed98c8c8c8c8c878b8b8b6040518a63ffffffff1660e01b815260040161014599989796959493929190610786565b602060405180830381600087803b15801561015f57600080fd5b505af1158015610173573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610197919061083a565b6101cd576040517f500c44b400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6101de8a8a8a8a8a8a8a8a8a61030a565b5050505050505050505050565b600082826040516101fd929190610700565b604051809103902090507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16635f6970c38989898989876040518763ffffffff1660e01b815260040161026a96959493929190610867565b602060405180830381600087803b15801561028457600080fd5b505af1158015610298573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102bc919061083a565b6102f2576040517f500c44b400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b610300878787878787610315565b5050505050505050565b505050505050505050565b505050505050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600061036261035d6103588461031d565b61033d565b61031d565b9050919050565b600061037482610347565b9050919050565b600061038682610369565b9050919050565b6103968161037b565b82525050565b60006020820190506103b1600083018461038d565b92915050565b600080fd5b600080fd5b6000819050919050565b6103d4816103c1565b81146103df57600080fd5b50565b6000813590506103f1816103cb565b92915050565b600080fd5b600080fd5b600080fd5b60008083601f84011261041c5761041b6103f7565b5b8235905067ffffffffffffffff811115610439576104386103fc565b5b60208301915083600182028301111561045557610454610401565b5b9250929050565b60008083601f840112610472576104716103f7565b5b8235905067ffffffffffffffff81111561048f5761048e6103fc565b5b6020830191508360018202830111156104ab576104aa610401565b5b9250929050565b6000819050919050565b6104c5816104b2565b81146104d057600080fd5b50565b6000813590506104e2816104bc565b92915050565b60008060008060008060008060008060c08b8d03121561050b5761050a6103b7565b5b60006105198d828e016103e2565b9a505060208b013567ffffffffffffffff81111561053a576105396103bc565b5b6105468d828e01610406565b995099505060408b013567ffffffffffffffff811115610569576105686103bc565b5b6105758d828e01610406565b975097505060608b013567ffffffffffffffff811115610598576105976103bc565b5b6105a48d828e0161045c565b955095505060808b013567ffffffffffffffff8111156105c7576105c66103bc565b5b6105d38d828e01610406565b935093505060a06105e68d828e016104d3565b9150509295989b9194979a5092959850565b60008060008060008060006080888a031215610617576106166103b7565b5b60006106258a828b016103e2565b975050602088013567ffffffffffffffff811115610646576106456103bc565b5b6106528a828b01610406565b9650965050604088013567ffffffffffffffff811115610675576106746103bc565b5b6106818a828b01610406565b9450945050606088013567ffffffffffffffff8111156106a4576106a36103bc565b5b6106b08a828b0161045c565b925092505092959891949750929550565b600081905092915050565b82818337600083830152505050565b60006106e783856106c1565b93506106f48385846106cc565b82840190509392505050565b600061070d8284866106db565b91508190509392505050565b610722816103c1565b82525050565b600082825260208201905092915050565b6000601f19601f8301169050919050565b60006107568385610728565b93506107638385846106cc565b61076c83610739565b840190509392505050565b610780816104b2565b82525050565b600060c08201905061079b600083018c610719565b81810360208301526107ae818a8c61074a565b905081810360408301526107c381888a61074a565b90506107d26060830187610719565b81810360808301526107e581858761074a565b90506107f460a0830184610777565b9a9950505050505050505050565b60008115159050919050565b61081781610802565b811461082257600080fd5b50565b6000815190506108348161080e565b92915050565b6000602082840312156108505761084f6103b7565b5b600061085e84828501610825565b91505092915050565b600060808201905061087c6000830189610719565b818103602083015261088f81878961074a565b905081810360408301526108a481858761074a565b90506108b36060830184610719565b97965050505050505056fea2646970667358221220dc39eaf40ec297f339a1bcf0e7c810163a3f4923dbbc4f5945df1b86a5cc16dc64736f6c63430008090033";

type AxelarExecutableConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: AxelarExecutableConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class AxelarExecutable__factory extends ContractFactory {
  constructor(...args: AxelarExecutableConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    gateway_: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<AxelarExecutable> {
    return super.deploy(gateway_, overrides || {}) as Promise<AxelarExecutable>;
  }
  override getDeployTransaction(
    gateway_: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(gateway_, overrides || {});
  }
  override attach(address: string): AxelarExecutable {
    return super.attach(address) as AxelarExecutable;
  }
  override connect(signer: Signer): AxelarExecutable__factory {
    return super.connect(signer) as AxelarExecutable__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): AxelarExecutableInterface {
    return new utils.Interface(_abi) as AxelarExecutableInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): AxelarExecutable {
    return new Contract(address, _abi, signerOrProvider) as AxelarExecutable;
  }
}
