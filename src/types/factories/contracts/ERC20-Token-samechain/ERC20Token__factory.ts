/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  ERC20Token,
  ERC20TokenInterface,
} from "../../../contracts/ERC20-Token-samechain/ERC20Token";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "Transfer",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_owner",
        type: "address",
      },
    ],
    name: "balanceOf",
    outputs: [
      {
        internalType: "uint256",
        name: "balance",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "decimals",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "name",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "symbol",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "totalSupply",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_amount",
        type: "uint256",
      },
    ],
    name: "transfer",
    outputs: [
      {
        internalType: "bool",
        name: "success",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60c06040526008608081905267657468657265756d60c01b60a090815261002991600091906100dd565b50604080518082019091526003808252620cae8d60eb1b6020909201918252610054916001916100dd565b506002805460ff1916601290811790915561007090600a610272565b61007d90620f4240610285565b60035534801561008c57600080fd5b5060035433600081815260046020908152604080832085905551938452919290917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef910160405180910390a36102df565b8280546100e9906102a4565b90600052602060002090601f01602090048101928261010b5760008555610151565b82601f1061012457805160ff1916838001178555610151565b82800160010185558215610151579182015b82811115610151578251825591602001919060010190610136565b5061015d929150610161565b5090565b5b8082111561015d5760008155600101610162565b634e487b7160e01b600052601160045260246000fd5b600181815b808511156101c75781600019048211156101ad576101ad610176565b808516156101ba57918102915b93841c9390800290610191565b509250929050565b6000826101de5750600161026c565b816101eb5750600061026c565b8160018114610201576002811461020b57610227565b600191505061026c565b60ff84111561021c5761021c610176565b50506001821b61026c565b5060208310610133831016604e8410600b841016171561024a575081810a61026c565b610254838361018c565b806000190482111561026857610268610176565b0290505b92915050565b600061027e83836101cf565b9392505050565b600081600019048311821515161561029f5761029f610176565b500290565b600181811c908216806102b857607f821691505b602082108114156102d957634e487b7160e01b600052602260045260246000fd5b50919050565b610478806102ee6000396000f3fe608060405234801561001057600080fd5b50600436106100725760003560e01c806370a082311161005057806370a08231146100cb57806395d89b4114610101578063a9059cbb1461010957600080fd5b806306fdde031461007757806318160ddd14610095578063313ce567146100ac575b600080fd5b61007f61012c565b60405161008c91906102f8565b60405180910390f35b61009e60035481565b60405190815260200161008c565b6002546100b99060ff1681565b60405160ff909116815260200161008c565b61009e6100d9366004610376565b73ffffffffffffffffffffffffffffffffffffffff1660009081526004602052604090205490565b61007f6101ba565b61011c610117366004610398565b6101c7565b604051901515815260200161008c565b60008054610139906103c2565b80601f0160208091040260200160405190810160405280929190818152602001828054610165906103c2565b80156101b25780601f10610187576101008083540402835291602001916101b2565b820191906000526020600020905b81548152906001019060200180831161019557829003601f168201915b505050505081565b60018054610139906103c2565b33600090815260046020526040812054821115610244576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f496e73756666696369656e742062616c616e6365000000000000000000000000604482015260640160405180910390fd5b3360009081526004602052604081208054849290610263908490610413565b909155505073ffffffffffffffffffffffffffffffffffffffff83166000908152600460205260408120805484929061029d90849061042a565b909155505060405182815273ffffffffffffffffffffffffffffffffffffffff84169033907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a350600192915050565b600060208083528351808285015260005b8181101561032557858101830151858201604001528201610309565b81811115610337576000604083870101525b50601f01601f1916929092016040019392505050565b803573ffffffffffffffffffffffffffffffffffffffff8116811461037157600080fd5b919050565b60006020828403121561038857600080fd5b6103918261034d565b9392505050565b600080604083850312156103ab57600080fd5b6103b48361034d565b946020939093013593505050565b600181811c908216806103d657607f821691505b602082108114156103f757634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fd5b600082821015610425576104256103fd565b500390565b6000821982111561043d5761043d6103fd565b50019056fea2646970667358221220bea5d756bfe9c2af872cf0a144ff507f75aa3ca135b8b3636dfbc7d3a215bde164736f6c63430008090033";

type ERC20TokenConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ERC20TokenConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class ERC20Token__factory extends ContractFactory {
  constructor(...args: ERC20TokenConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ERC20Token> {
    return super.deploy(overrides || {}) as Promise<ERC20Token>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): ERC20Token {
    return super.attach(address) as ERC20Token;
  }
  override connect(signer: Signer): ERC20Token__factory {
    return super.connect(signer) as ERC20Token__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ERC20TokenInterface {
    return new utils.Interface(_abi) as ERC20TokenInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): ERC20Token {
    return new Contract(address, _abi, signerOrProvider) as ERC20Token;
  }
}
