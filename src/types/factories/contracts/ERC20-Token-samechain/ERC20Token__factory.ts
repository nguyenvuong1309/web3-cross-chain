/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  ERC20Token,
  ERC20TokenInterface,
} from "../../../contracts/ERC20-Token-samechain/ERC20Token";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "Transfer",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_owner",
        type: "address",
      },
    ],
    name: "balanceOf",
    outputs: [
      {
        internalType: "uint256",
        name: "balance",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "decimals",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "name",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "symbol",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "totalSupply",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_amount",
        type: "uint256",
      },
    ],
    name: "transfer",
    outputs: [
      {
        internalType: "bool",
        name: "success",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60806040526040518060400160405280600881526020017f657468657265756d0000000000000000000000000000000000000000000000008152506000908051906020019062000051929190620001b4565b506040518060400160405280600381526020017f6574680000000000000000000000000000000000000000000000000000000000815250600190805190602001906200009f929190620001b4565b506012600260006101000a81548160ff021916908360ff160217905550600260009054906101000a900460ff1660ff16600a620000dd9190620003f1565b620f4240620000ed919062000442565b600355348015620000fd57600080fd5b50600354600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055503373ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef600354604051620001a69190620004b4565b60405180910390a362000536565b828054620001c29062000500565b90600052602060002090601f016020900481019282620001e6576000855562000232565b82601f106200020157805160ff191683800117855562000232565b8280016001018555821562000232579182015b828111156200023157825182559160200191906001019062000214565b5b50905062000241919062000245565b5090565b5b808211156200026057600081600090555060010162000246565b5090565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60008160011c9050919050565b6000808291508390505b6001851115620002f257808604811115620002ca57620002c962000264565b5b6001851615620002da5780820291505b8081029050620002ea8562000293565b9450620002aa565b94509492505050565b6000826200030d5760019050620003e0565b816200031d5760009050620003e0565b8160018114620003365760028114620003415762000377565b6001915050620003e0565b60ff84111562000356576200035562000264565b5b8360020a91508482111562000370576200036f62000264565b5b50620003e0565b5060208310610133831016604e8410600b8410161715620003b15782820a905083811115620003ab57620003aa62000264565b5b620003e0565b620003c08484846001620002a0565b92509050818404811115620003da57620003d962000264565b5b81810290505b9392505050565b6000819050919050565b6000620003fe82620003e7565b91506200040b83620003e7565b92506200043a7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8484620002fb565b905092915050565b60006200044f82620003e7565b91506200045c83620003e7565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048311821515161562000498576200049762000264565b5b828202905092915050565b620004ae81620003e7565b82525050565b6000602082019050620004cb6000830184620004a3565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806200051957607f821691505b6020821081141562000530576200052f620004d1565b5b50919050565b61087080620005466000396000f3fe608060405234801561001057600080fd5b50600436106100625760003560e01c806306fdde031461006757806318160ddd14610085578063313ce567146100a357806370a08231146100c157806395d89b41146100f1578063a9059cbb1461010f575b600080fd5b61006f61013f565b60405161007c91906104f5565b60405180910390f35b61008d6101cd565b60405161009a9190610530565b60405180910390f35b6100ab6101d3565b6040516100b89190610567565b60405180910390f35b6100db60048036038101906100d691906105e5565b6101e6565b6040516100e89190610530565b60405180910390f35b6100f961022f565b60405161010691906104f5565b60405180910390f35b6101296004803603810190610124919061063e565b6102bd565b6040516101369190610699565b60405180910390f35b6000805461014c906106e3565b80601f0160208091040260200160405190810160405280929190818152602001828054610178906106e3565b80156101c55780601f1061019a576101008083540402835291602001916101c5565b820191906000526020600020905b8154815290600101906020018083116101a857829003601f168201915b505050505081565b60035481565b600260009054906101000a900460ff1681565b6000600460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6001805461023c906106e3565b80601f0160208091040260200160405190810160405280929190818152602001828054610268906106e3565b80156102b55780601f1061028a576101008083540402835291602001916102b5565b820191906000526020600020905b81548152906001019060200180831161029857829003601f168201915b505050505081565b600081600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541015610341576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161033890610761565b60405180910390fd5b81600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461039091906107b0565b9250508190555081600460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546103e691906107e4565b925050819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8460405161044a9190610530565b60405180910390a36001905092915050565b600081519050919050565b600082825260208201905092915050565b60005b8381101561049657808201518184015260208101905061047b565b838111156104a5576000848401525b50505050565b6000601f19601f8301169050919050565b60006104c78261045c565b6104d18185610467565b93506104e1818560208601610478565b6104ea816104ab565b840191505092915050565b6000602082019050818103600083015261050f81846104bc565b905092915050565b6000819050919050565b61052a81610517565b82525050565b60006020820190506105456000830184610521565b92915050565b600060ff82169050919050565b6105618161054b565b82525050565b600060208201905061057c6000830184610558565b92915050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006105b282610587565b9050919050565b6105c2816105a7565b81146105cd57600080fd5b50565b6000813590506105df816105b9565b92915050565b6000602082840312156105fb576105fa610582565b5b6000610609848285016105d0565b91505092915050565b61061b81610517565b811461062657600080fd5b50565b60008135905061063881610612565b92915050565b6000806040838503121561065557610654610582565b5b6000610663858286016105d0565b925050602061067485828601610629565b9150509250929050565b60008115159050919050565b6106938161067e565b82525050565b60006020820190506106ae600083018461068a565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806106fb57607f821691505b6020821081141561070f5761070e6106b4565b5b50919050565b7f496e73756666696369656e742062616c616e6365000000000000000000000000600082015250565b600061074b601483610467565b915061075682610715565b602082019050919050565b6000602082019050818103600083015261077a8161073e565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006107bb82610517565b91506107c683610517565b9250828210156107d9576107d8610781565b5b828203905092915050565b60006107ef82610517565b91506107fa83610517565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111561082f5761082e610781565b5b82820190509291505056fea2646970667358221220a2beaab3fa4b2de4803dfd0384ef4b59a45c55913941b11df7b2ba20e538fa0e64736f6c63430008090033";

type ERC20TokenConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ERC20TokenConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class ERC20Token__factory extends ContractFactory {
  constructor(...args: ERC20TokenConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ERC20Token> {
    return super.deploy(overrides || {}) as Promise<ERC20Token>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): ERC20Token {
    return super.attach(address) as ERC20Token;
  }
  override connect(signer: Signer): ERC20Token__factory {
    return super.connect(signer) as ERC20Token__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ERC20TokenInterface {
    return new utils.Interface(_abi) as ERC20TokenInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): ERC20Token {
    return new Contract(address, _abi, signerOrProvider) as ERC20Token;
  }
}
