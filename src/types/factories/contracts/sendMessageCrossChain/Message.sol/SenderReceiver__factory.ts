/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../../common";
import type {
  SenderReceiver,
  SenderReceiverInterface,
} from "../../../../contracts/sendMessageCrossChain/Message.sol/SenderReceiver";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "gateway_",
        type: "address",
      },
      {
        internalType: "address",
        name: "gasService_",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "InvalidAddress",
    type: "error",
  },
  {
    inputs: [],
    name: "NotApprovedByGateway",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "string",
        name: "sourceChain",
        type: "string",
      },
      {
        indexed: false,
        internalType: "string",
        name: "sourceAddress",
        type: "string",
      },
      {
        indexed: false,
        internalType: "string",
        name: "message",
        type: "string",
      },
    ],
    name: "MessageReceived",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "commandId",
        type: "bytes32",
      },
      {
        internalType: "string",
        name: "sourceChain",
        type: "string",
      },
      {
        internalType: "string",
        name: "sourceAddress",
        type: "string",
      },
      {
        internalType: "bytes",
        name: "payload",
        type: "bytes",
      },
    ],
    name: "execute",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "commandId",
        type: "bytes32",
      },
      {
        internalType: "string",
        name: "sourceChain",
        type: "string",
      },
      {
        internalType: "string",
        name: "sourceAddress",
        type: "string",
      },
      {
        internalType: "bytes",
        name: "payload",
        type: "bytes",
      },
      {
        internalType: "string",
        name: "tokenSymbol",
        type: "string",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "executeWithToken",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "gasService",
    outputs: [
      {
        internalType: "contract IAxelarGasService",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "gateway",
    outputs: [
      {
        internalType: "contract IAxelarGateway",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "message",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "destinationChain",
        type: "string",
      },
      {
        internalType: "string",
        name: "destinationAddress",
        type: "string",
      },
      {
        internalType: "string",
        name: "message_",
        type: "string",
      },
    ],
    name: "sendMessage",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60c06040523480156200001157600080fd5b50604051620016803803806200168083398181016040528101906200003791906200017a565b81600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036200009f576040517fe6c4247b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1681525050508073ffffffffffffffffffffffffffffffffffffffff1660a08173ffffffffffffffffffffffffffffffffffffffff16815250505050620001c1565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620001428262000115565b9050919050565b620001548162000135565b81146200016057600080fd5b50565b600081519050620001748162000149565b92915050565b6000806040838503121562000194576200019362000110565b5b6000620001a48582860162000163565b9250506020620001b78582860162000163565b9150509250929050565b60805160a05161147d620002036000396000818161017101526104f5015260008181610209015281816102a5015281816102e50152610401015261147d6000f3fe6080604052600436106100555760003560e01c80630eabeffe1461005a578063116191b6146100765780631a98b2e0146100a157806349160658146100ca5780636a22d8cc146100f3578063e21f37ce1461011e575b600080fd5b610074600480360381019061006f919061072d565b610149565b005b34801561008257600080fd5b5061008b6102a3565b6040516100989190610860565b60405180910390f35b3480156100ad57600080fd5b506100c860048036038101906100c3919061093d565b6102c7565b005b3480156100d657600080fd5b506100f160048036038101906100ec9190610a4d565b6103e3565b005b3480156100ff57600080fd5b506101086104f3565b6040516101159190610b37565b60405180910390f35b34801561012a57600080fd5b50610133610517565b6040516101409190610be2565b60405180910390f35b6000828260405160200161015e929190610c40565b60405160208183030381529060405290507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16630c93e3bb34308a8a8a8a88336040518963ffffffff1660e01b81526004016101d59796959493929190610cda565b6000604051808303818588803b1580156101ee57600080fd5b505af1158015610202573d6000803e3d6000fd5b50505050507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16631c92115f88888888866040518663ffffffff1660e01b8152600401610268959493929190610d46565b600060405180830381600087803b15801561028257600080fd5b505af1158015610296573d6000803e3d6000fd5b5050505050505050505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b600085856040516102d9929190610dc6565b604051809103902090507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16631876eed98c8c8c8c8c878b8b8b6040518a63ffffffff1660e01b815260040161034c99989796959493929190610dfd565b6020604051808303816000875af115801561036b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061038f9190610eb1565b6103c5576040517f500c44b400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6103d68a8a8a8a8a8a8a8a8a6105a5565b5050505050505050505050565b600082826040516103f5929190610dc6565b604051809103902090507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16635f6970c38989898989876040518763ffffffff1660e01b815260040161046296959493929190610ede565b6020604051808303816000875af1158015610481573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104a59190610eb1565b6104db576040517f500c44b400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6104e98787878787876105b0565b5050505050505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b6000805461052490610f64565b80601f016020809104026020016040519081016040528092919081815260200182805461055090610f64565b801561059d5780601f106105725761010080835404028352916020019161059d565b820191906000526020600020905b81548152906001019060200180831161058057829003601f168201915b505050505081565b505050505050505050565b81818101906105bf91906110b6565b600090816105cd91906112a1565b507f4bb91efa6f101cb39247944090c1327252e3046492283c9246a07b9d01451f4e8686868660006040516106069594939291906113f7565b60405180910390a16106a5868686866000805461062290610f64565b80601f016020809104026020016040519081016040528092919081815260200182805461064e90610f64565b801561069b5780601f106106705761010080835404028352916020019161069b565b820191906000526020600020905b81548152906001019060200180831161067e57829003601f168201915b50505050506106ad565b505050505050565b5050505050565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b60008083601f8401126106ed576106ec6106c8565b5b8235905067ffffffffffffffff81111561070a576107096106cd565b5b602083019150836001820283011115610726576107256106d2565b5b9250929050565b6000806000806000806060878903121561074a576107496106be565b5b600087013567ffffffffffffffff811115610768576107676106c3565b5b61077489828a016106d7565b9650965050602087013567ffffffffffffffff811115610797576107966106c3565b5b6107a389828a016106d7565b9450945050604087013567ffffffffffffffff8111156107c6576107c56106c3565b5b6107d289828a016106d7565b92509250509295509295509295565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600061082661082161081c846107e1565b610801565b6107e1565b9050919050565b60006108388261080b565b9050919050565b600061084a8261082d565b9050919050565b61085a8161083f565b82525050565b60006020820190506108756000830184610851565b92915050565b6000819050919050565b61088e8161087b565b811461089957600080fd5b50565b6000813590506108ab81610885565b92915050565b60008083601f8401126108c7576108c66106c8565b5b8235905067ffffffffffffffff8111156108e4576108e36106cd565b5b602083019150836001820283011115610900576108ff6106d2565b5b9250929050565b6000819050919050565b61091a81610907565b811461092557600080fd5b50565b60008135905061093781610911565b92915050565b60008060008060008060008060008060c08b8d0312156109605761095f6106be565b5b600061096e8d828e0161089c565b9a505060208b013567ffffffffffffffff81111561098f5761098e6106c3565b5b61099b8d828e016106d7565b995099505060408b013567ffffffffffffffff8111156109be576109bd6106c3565b5b6109ca8d828e016106d7565b975097505060608b013567ffffffffffffffff8111156109ed576109ec6106c3565b5b6109f98d828e016108b1565b955095505060808b013567ffffffffffffffff811115610a1c57610a1b6106c3565b5b610a288d828e016106d7565b935093505060a0610a3b8d828e01610928565b9150509295989b9194979a5092959850565b60008060008060008060006080888a031215610a6c57610a6b6106be565b5b6000610a7a8a828b0161089c565b975050602088013567ffffffffffffffff811115610a9b57610a9a6106c3565b5b610aa78a828b016106d7565b9650965050604088013567ffffffffffffffff811115610aca57610ac96106c3565b5b610ad68a828b016106d7565b9450945050606088013567ffffffffffffffff811115610af957610af86106c3565b5b610b058a828b016108b1565b925092505092959891949750929550565b6000610b218261082d565b9050919050565b610b3181610b16565b82525050565b6000602082019050610b4c6000830184610b28565b92915050565b600081519050919050565b600082825260208201905092915050565b60005b83811015610b8c578082015181840152602081019050610b71565b60008484015250505050565b6000601f19601f8301169050919050565b6000610bb482610b52565b610bbe8185610b5d565b9350610bce818560208601610b6e565b610bd781610b98565b840191505092915050565b60006020820190508181036000830152610bfc8184610ba9565b905092915050565b82818337600083830152505050565b6000610c1f8385610b5d565b9350610c2c838584610c04565b610c3583610b98565b840190509392505050565b60006020820190508181036000830152610c5b818486610c13565b90509392505050565b6000610c6f826107e1565b9050919050565b610c7f81610c64565b82525050565b600081519050919050565b600082825260208201905092915050565b6000610cac82610c85565b610cb68185610c90565b9350610cc6818560208601610b6e565b610ccf81610b98565b840191505092915050565b600060a082019050610cef600083018a610c76565b8181036020830152610d0281888a610c13565b90508181036040830152610d17818688610c13565b90508181036060830152610d2b8185610ca1565b9050610d3a6080830184610c76565b98975050505050505050565b60006060820190508181036000830152610d61818789610c13565b90508181036020830152610d76818587610c13565b90508181036040830152610d8a8184610ca1565b90509695505050505050565b600081905092915050565b6000610dad8385610d96565b9350610dba838584610c04565b82840190509392505050565b6000610dd3828486610da1565b91508190509392505050565b610de88161087b565b82525050565b610df781610907565b82525050565b600060c082019050610e12600083018c610ddf565b8181036020830152610e25818a8c610c13565b90508181036040830152610e3a81888a610c13565b9050610e496060830187610ddf565b8181036080830152610e5c818587610c13565b9050610e6b60a0830184610dee565b9a9950505050505050505050565b60008115159050919050565b610e8e81610e79565b8114610e9957600080fd5b50565b600081519050610eab81610e85565b92915050565b600060208284031215610ec757610ec66106be565b5b6000610ed584828501610e9c565b91505092915050565b6000608082019050610ef36000830189610ddf565b8181036020830152610f06818789610c13565b90508181036040830152610f1b818587610c13565b9050610f2a6060830184610ddf565b979650505050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680610f7c57607f821691505b602082108103610f8f57610f8e610f35565b5b50919050565b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b610fd282610b98565b810181811067ffffffffffffffff82111715610ff157610ff0610f9a565b5b80604052505050565b60006110046106b4565b90506110108282610fc9565b919050565b600067ffffffffffffffff8211156110305761102f610f9a565b5b61103982610b98565b9050602081019050919050565b600061105961105484611015565b610ffa565b90508281526020810184848401111561107557611074610f95565b5b611080848285610c04565b509392505050565b600082601f83011261109d5761109c6106c8565b5b81356110ad848260208601611046565b91505092915050565b6000602082840312156110cc576110cb6106be565b5b600082013567ffffffffffffffff8111156110ea576110e96106c3565b5b6110f684828501611088565b91505092915050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b6000600883026111617fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82611124565b61116b8683611124565b95508019841693508086168417925050509392505050565b600061119e61119961119484610907565b610801565b610907565b9050919050565b6000819050919050565b6111b883611183565b6111cc6111c4826111a5565b848454611131565b825550505050565b600090565b6111e16111d4565b6111ec8184846111af565b505050565b5b81811015611210576112056000826111d9565b6001810190506111f2565b5050565b601f82111561125557611226816110ff565b61122f84611114565b8101602085101561123e578190505b61125261124a85611114565b8301826111f1565b50505b505050565b600082821c905092915050565b60006112786000198460080261125a565b1980831691505092915050565b60006112918383611267565b9150826002028217905092915050565b6112aa82610b52565b67ffffffffffffffff8111156112c3576112c2610f9a565b5b6112cd8254610f64565b6112d8828285611214565b600060209050601f83116001811461130b57600084156112f9578287015190505b6113038582611285565b86555061136b565b601f198416611319866110ff565b60005b828110156113415784890151825560018201915060208501945060208101905061131c565b8683101561135e578489015161135a601f891682611267565b8355505b6001600288020188555050505b505050505050565b6000815461138081610f64565b61138a8186610b5d565b945060018216600081146113a557600181146113bb576113ee565b60ff1983168652811515602002860193506113ee565b6113c4856110ff565b60005b838110156113e6578154818901526001820191506020810190506113c7565b808801955050505b50505092915050565b60006060820190508181036000830152611412818789610c13565b90508181036020830152611427818587610c13565b9050818103604083015261143b8184611373565b9050969550505050505056fea26469706673582212202cb61fea947a02e169d0e201dc0ebc9fd892938ae1ed356c78aeb2111c35bfee64736f6c63430008140033";

type SenderReceiverConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: SenderReceiverConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class SenderReceiver__factory extends ContractFactory {
  constructor(...args: SenderReceiverConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    gateway_: PromiseOrValue<string>,
    gasService_: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<SenderReceiver> {
    return super.deploy(
      gateway_,
      gasService_,
      overrides || {}
    ) as Promise<SenderReceiver>;
  }
  override getDeployTransaction(
    gateway_: PromiseOrValue<string>,
    gasService_: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(gateway_, gasService_, overrides || {});
  }
  override attach(address: string): SenderReceiver {
    return super.attach(address) as SenderReceiver;
  }
  override connect(signer: Signer): SenderReceiver__factory {
    return super.connect(signer) as SenderReceiver__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): SenderReceiverInterface {
    return new utils.Interface(_abi) as SenderReceiverInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): SenderReceiver {
    return new Contract(address, _abi, signerOrProvider) as SenderReceiver;
  }
}
