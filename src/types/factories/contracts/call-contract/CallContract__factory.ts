/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  CallContract,
  CallContractInterface,
} from "../../../contracts/call-contract/CallContract";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_gateway",
        type: "address",
      },
      {
        internalType: "address",
        name: "_gasReceiver",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "InvalidAddress",
    type: "error",
  },
  {
    inputs: [],
    name: "NotApprovedByGateway",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "string",
        name: "_from",
        type: "string",
      },
      {
        indexed: false,
        internalType: "string",
        name: "_message",
        type: "string",
      },
    ],
    name: "Executed",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "commandId",
        type: "bytes32",
      },
      {
        internalType: "string",
        name: "sourceChain",
        type: "string",
      },
      {
        internalType: "string",
        name: "sourceAddress",
        type: "string",
      },
      {
        internalType: "bytes",
        name: "payload",
        type: "bytes",
      },
    ],
    name: "execute",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "commandId",
        type: "bytes32",
      },
      {
        internalType: "string",
        name: "sourceChain",
        type: "string",
      },
      {
        internalType: "string",
        name: "sourceAddress",
        type: "string",
      },
      {
        internalType: "bytes",
        name: "payload",
        type: "bytes",
      },
      {
        internalType: "string",
        name: "tokenSymbol",
        type: "string",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "executeWithToken",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "gasService",
    outputs: [
      {
        internalType: "contract IAxelarGasService",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "gateway",
    outputs: [
      {
        internalType: "contract IAxelarGateway",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "message",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "destinationChain",
        type: "string",
      },
      {
        internalType: "string",
        name: "destinationAddress",
        type: "string",
      },
      {
        internalType: "string",
        name: "_message",
        type: "string",
      },
    ],
    name: "sendInterchainMessage",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [],
    name: "sourceAddress",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "sourceChain",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60c06040523480156200001157600080fd5b506040516200190a3803806200190a83398181016040528101906200003791906200017a565b81600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036200009f576040517fe6c4247b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1681525050508073ffffffffffffffffffffffffffffffffffffffff1660a08173ffffffffffffffffffffffffffffffffffffffff16815250505050620001c1565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620001428262000115565b9050919050565b620001548162000135565b81146200016057600080fd5b50565b600081519050620001748162000149565b92915050565b6000806040838503121562000194576200019362000110565b5b6000620001a48582860162000163565b9250506020620001b78582860162000163565b9150509250929050565b60805160a05161170762000203600039600081816104a5015261064e0152600081816101c701528181610207015281816103b101526106e601526117076000f3fe60806040526004361061007b5760003560e01c80636a22d8cc1161004e5780636a22d8cc14610128578063b0fa844414610153578063e21f37ce1461017e578063f065296d146101a95761007b565b8063116191b6146100805780631a98b2e0146100ab5780631c6ffa46146100d457806349160658146100ff575b600080fd5b34801561008c57600080fd5b506100956101c5565b6040516100a2919061088f565b60405180910390f35b3480156100b757600080fd5b506100d260048036038101906100cd91906109e5565b6101e9565b005b3480156100e057600080fd5b506100e9610305565b6040516100f69190610b85565b60405180910390f35b34801561010b57600080fd5b5061012660048036038101906101219190610ba7565b610393565b005b34801561013457600080fd5b5061013d6104a3565b60405161014a9190610c91565b60405180910390f35b34801561015f57600080fd5b506101686104c7565b6040516101759190610b85565b60405180910390f35b34801561018a57600080fd5b50610193610555565b6040516101a09190610b85565b60405180910390f35b6101c360048036038101906101be9190610cac565b6105e3565b005b7f000000000000000000000000000000000000000000000000000000000000000081565b600085856040516101fb929190610d9f565b604051809103902090507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16631876eed98c8c8c8c8c878b8b8b6040518a63ffffffff1660e01b815260040161026e99989796959493929190610e03565b6020604051808303816000875af115801561028d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102b19190610eb7565b6102e7576040517f500c44b400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6102f88a8a8a8a8a8a8a8a8a610780565b5050505050505050505050565b6001805461031290610f13565b80601f016020809104026020016040519081016040528092919081815260200182805461033e90610f13565b801561038b5780601f106103605761010080835404028352916020019161038b565b820191906000526020600020905b81548152906001019060200180831161036e57829003601f168201915b505050505081565b600082826040516103a5929190610d9f565b604051809103902090507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16635f6970c38989898989876040518763ffffffff1660e01b815260040161041296959493929190610f44565b6020604051808303816000875af1158015610431573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104559190610eb7565b61048b576040517f500c44b400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61049987878787878761078b565b5050505050505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b600280546104d490610f13565b80601f016020809104026020016040519081016040528092919081815260200182805461050090610f13565b801561054d5780601f106105225761010080835404028352916020019161054d565b820191906000526020600020905b81548152906001019060200180831161053057829003601f168201915b505050505081565b6000805461056290610f13565b80601f016020809104026020016040519081016040528092919081815260200182805461058e90610f13565b80156105db5780601f106105b0576101008083540402835291602001916105db565b820191906000526020600020905b8154815290600101906020018083116105be57829003601f168201915b505050505081565b60003411610626576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161061d90610fe7565b60405180910390fd5b6000828260405160200161063b929190611007565b60405160208183030381529060405290507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16630c93e3bb34308a8a8a8a88336040518963ffffffff1660e01b81526004016106b297969594939291906110a1565b6000604051808303818588803b1580156106cb57600080fd5b505af11580156106df573d6000803e3d6000fd5b50505050507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16631c92115f88888888866040518663ffffffff1660e01b815260040161074595949392919061110d565b600060405180830381600087803b15801561075f57600080fd5b505af1158015610773573d6000803e3d6000fd5b5050505050505050505050565b505050505050505050565b818181019061079a919061127e565b600090816107a89190611469565b508585600191826107ba929190611546565b508383600291826107cc929190611546565b507f0d97a9033491f569feb4c72abf12722b227eec24ee13547bec3654f8663ff7116002600060405161080092919061169a565b60405180910390a1505050505050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600061085561085061084b84610810565b610830565b610810565b9050919050565b60006108678261083a565b9050919050565b60006108798261085c565b9050919050565b6108898161086e565b82525050565b60006020820190506108a46000830184610880565b92915050565b6000604051905090565b600080fd5b600080fd5b6000819050919050565b6108d1816108be565b81146108dc57600080fd5b50565b6000813590506108ee816108c8565b92915050565b600080fd5b600080fd5b600080fd5b60008083601f840112610919576109186108f4565b5b8235905067ffffffffffffffff811115610936576109356108f9565b5b602083019150836001820283011115610952576109516108fe565b5b9250929050565b60008083601f84011261096f5761096e6108f4565b5b8235905067ffffffffffffffff81111561098c5761098b6108f9565b5b6020830191508360018202830111156109a8576109a76108fe565b5b9250929050565b6000819050919050565b6109c2816109af565b81146109cd57600080fd5b50565b6000813590506109df816109b9565b92915050565b60008060008060008060008060008060c08b8d031215610a0857610a076108b4565b5b6000610a168d828e016108df565b9a505060208b013567ffffffffffffffff811115610a3757610a366108b9565b5b610a438d828e01610903565b995099505060408b013567ffffffffffffffff811115610a6657610a656108b9565b5b610a728d828e01610903565b975097505060608b013567ffffffffffffffff811115610a9557610a946108b9565b5b610aa18d828e01610959565b955095505060808b013567ffffffffffffffff811115610ac457610ac36108b9565b5b610ad08d828e01610903565b935093505060a0610ae38d828e016109d0565b9150509295989b9194979a5092959850565b600081519050919050565b600082825260208201905092915050565b60005b83811015610b2f578082015181840152602081019050610b14565b60008484015250505050565b6000601f19601f8301169050919050565b6000610b5782610af5565b610b618185610b00565b9350610b71818560208601610b11565b610b7a81610b3b565b840191505092915050565b60006020820190508181036000830152610b9f8184610b4c565b905092915050565b60008060008060008060006080888a031215610bc657610bc56108b4565b5b6000610bd48a828b016108df565b975050602088013567ffffffffffffffff811115610bf557610bf46108b9565b5b610c018a828b01610903565b9650965050604088013567ffffffffffffffff811115610c2457610c236108b9565b5b610c308a828b01610903565b9450945050606088013567ffffffffffffffff811115610c5357610c526108b9565b5b610c5f8a828b01610959565b925092505092959891949750929550565b6000610c7b8261085c565b9050919050565b610c8b81610c70565b82525050565b6000602082019050610ca66000830184610c82565b92915050565b60008060008060008060608789031215610cc957610cc86108b4565b5b600087013567ffffffffffffffff811115610ce757610ce66108b9565b5b610cf389828a01610903565b9650965050602087013567ffffffffffffffff811115610d1657610d156108b9565b5b610d2289828a01610903565b9450945050604087013567ffffffffffffffff811115610d4557610d446108b9565b5b610d5189828a01610903565b92509250509295509295509295565b600081905092915050565b82818337600083830152505050565b6000610d868385610d60565b9350610d93838584610d6b565b82840190509392505050565b6000610dac828486610d7a565b91508190509392505050565b610dc1816108be565b82525050565b6000610dd38385610b00565b9350610de0838584610d6b565b610de983610b3b565b840190509392505050565b610dfd816109af565b82525050565b600060c082019050610e18600083018c610db8565b8181036020830152610e2b818a8c610dc7565b90508181036040830152610e4081888a610dc7565b9050610e4f6060830187610db8565b8181036080830152610e62818587610dc7565b9050610e7160a0830184610df4565b9a9950505050505050505050565b60008115159050919050565b610e9481610e7f565b8114610e9f57600080fd5b50565b600081519050610eb181610e8b565b92915050565b600060208284031215610ecd57610ecc6108b4565b5b6000610edb84828501610ea2565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680610f2b57607f821691505b602082108103610f3e57610f3d610ee4565b5b50919050565b6000608082019050610f596000830189610db8565b8181036020830152610f6c818789610dc7565b90508181036040830152610f81818587610dc7565b9050610f906060830184610db8565b979650505050505050565b7f476173207061796d656e74206973207265717569726564000000000000000000600082015250565b6000610fd1601783610b00565b9150610fdc82610f9b565b602082019050919050565b6000602082019050818103600083015261100081610fc4565b9050919050565b60006020820190508181036000830152611022818486610dc7565b90509392505050565b600061103682610810565b9050919050565b6110468161102b565b82525050565b600081519050919050565b600082825260208201905092915050565b60006110738261104c565b61107d8185611057565b935061108d818560208601610b11565b61109681610b3b565b840191505092915050565b600060a0820190506110b6600083018a61103d565b81810360208301526110c981888a610dc7565b905081810360408301526110de818688610dc7565b905081810360608301526110f28185611068565b9050611101608083018461103d565b98975050505050505050565b60006060820190508181036000830152611128818789610dc7565b9050818103602083015261113d818587610dc7565b905081810360408301526111518184611068565b90509695505050505050565b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b61119a82610b3b565b810181811067ffffffffffffffff821117156111b9576111b8611162565b5b80604052505050565b60006111cc6108aa565b90506111d88282611191565b919050565b600067ffffffffffffffff8211156111f8576111f7611162565b5b61120182610b3b565b9050602081019050919050565b600061122161121c846111dd565b6111c2565b90508281526020810184848401111561123d5761123c61115d565b5b611248848285610d6b565b509392505050565b600082601f830112611265576112646108f4565b5b813561127584826020860161120e565b91505092915050565b600060208284031215611294576112936108b4565b5b600082013567ffffffffffffffff8111156112b2576112b16108b9565b5b6112be84828501611250565b91505092915050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b6000600883026113297fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff826112ec565b61133386836112ec565b95508019841693508086168417925050509392505050565b600061136661136161135c846109af565b610830565b6109af565b9050919050565b6000819050919050565b6113808361134b565b61139461138c8261136d565b8484546112f9565b825550505050565b600090565b6113a961139c565b6113b4818484611377565b505050565b5b818110156113d8576113cd6000826113a1565b6001810190506113ba565b5050565b601f82111561141d576113ee816112c7565b6113f7846112dc565b81016020851015611406578190505b61141a611412856112dc565b8301826113b9565b50505b505050565b600082821c905092915050565b600061144060001984600802611422565b1980831691505092915050565b6000611459838361142f565b9150826002028217905092915050565b61147282610af5565b67ffffffffffffffff81111561148b5761148a611162565b5b6114958254610f13565b6114a08282856113dc565b600060209050601f8311600181146114d357600084156114c1578287015190505b6114cb858261144d565b865550611533565b601f1984166114e1866112c7565b60005b82811015611509578489015182556001820191506020850194506020810190506114e4565b868310156115265784890151611522601f89168261142f565b8355505b6001600288020188555050505b505050505050565b600082905092915050565b611550838361153b565b67ffffffffffffffff81111561156957611568611162565b5b6115738254610f13565b61157e8282856113dc565b6000601f8311600181146115ad576000841561159b578287013590505b6115a5858261144d565b86555061160d565b601f1984166115bb866112c7565b60005b828110156115e3578489013582556001820191506020850194506020810190506115be565b8683101561160057848901356115fc601f89168261142f565b8355505b6001600288020188555050505b50505050505050565b6000815461162381610f13565b61162d8186610b00565b94506001821660008114611648576001811461165e57611691565b60ff198316865281151560200286019350611691565b611667856112c7565b60005b838110156116895781548189015260018201915060208101905061166a565b808801955050505b50505092915050565b600060408201905081810360008301526116b48185611616565b905081810360208301526116c88184611616565b9050939250505056fea26469706673582212207be2d6920f7d74337150f73f0f8ba469675561b6c3256b3b272096f0fcbbf09564736f6c63430008140033";

type CallContractConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: CallContractConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class CallContract__factory extends ContractFactory {
  constructor(...args: CallContractConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _gateway: PromiseOrValue<string>,
    _gasReceiver: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<CallContract> {
    return super.deploy(
      _gateway,
      _gasReceiver,
      overrides || {}
    ) as Promise<CallContract>;
  }
  override getDeployTransaction(
    _gateway: PromiseOrValue<string>,
    _gasReceiver: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_gateway, _gasReceiver, overrides || {});
  }
  override attach(address: string): CallContract {
    return super.attach(address) as CallContract;
  }
  override connect(signer: Signer): CallContract__factory {
    return super.connect(signer) as CallContract__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): CallContractInterface {
    return new utils.Interface(_abi) as CallContractInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): CallContract {
    return new Contract(address, _abi, signerOrProvider) as CallContract;
  }
}
