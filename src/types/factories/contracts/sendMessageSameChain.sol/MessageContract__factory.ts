/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  MessageContract,
  MessageContractInterface,
} from "../../../contracts/sendMessageSameChain.sol/MessageContract";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        indexed: false,
        internalType: "string",
        name: "message",
        type: "string",
      },
    ],
    name: "MessageSent",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_address",
        type: "address",
      },
    ],
    name: "getMessages",
    outputs: [
      {
        internalType: "string[]",
        name: "",
        type: "string[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_to",
        type: "address",
      },
      {
        internalType: "string",
        name: "_message",
        type: "string",
      },
    ],
    name: "sendMessage",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b506109a6806100206000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c8063b2f713221461003b578063de6f24bb1461006b575b600080fd5b610055600480360381019061005091906102ea565b610087565b6040516100629190610469565b60405180910390f35b610085600480360381019061008091906105c0565b61019e565b005b60606000808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020805480602002602001604051908101604052809291908181526020016000905b828210156101935783829060005260206000200180546101069061064b565b80601f01602080910402602001604051908101604052809291908181526020018280546101329061064b565b801561017f5780601f106101545761010080835404028352916020019161017f565b820191906000526020600020905b81548152906001019060200180831161016257829003601f168201915b5050505050815260200190600101906100e7565b505050509050919050565b6000808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190806001815401808255809150506001900390600052602060002001600090919091909150908161020e9190610832565b508173ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fe2cf7446a11cbcd14cd99ea3a1bb77fb7653a64f4064d660140b5100d001e13c8360405161026c919061094e565b60405180910390a35050565b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006102b78261028c565b9050919050565b6102c7816102ac565b81146102d257600080fd5b50565b6000813590506102e4816102be565b92915050565b600060208284031215610300576102ff610282565b5b600061030e848285016102d5565b91505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b600081519050919050565b600082825260208201905092915050565b60005b8381101561037d578082015181840152602081019050610362565b60008484015250505050565b6000601f19601f8301169050919050565b60006103a582610343565b6103af818561034e565b93506103bf81856020860161035f565b6103c881610389565b840191505092915050565b60006103df838361039a565b905092915050565b6000602082019050919050565b60006103ff82610317565b6104098185610322565b93508360208202850161041b85610333565b8060005b85811015610457578484038952815161043885826103d3565b9450610443836103e7565b925060208a0199505060018101905061041f565b50829750879550505050505092915050565b6000602082019050818103600083015261048381846103f4565b905092915050565b600080fd5b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6104cd82610389565b810181811067ffffffffffffffff821117156104ec576104eb610495565b5b80604052505050565b60006104ff610278565b905061050b82826104c4565b919050565b600067ffffffffffffffff82111561052b5761052a610495565b5b61053482610389565b9050602081019050919050565b82818337600083830152505050565b600061056361055e84610510565b6104f5565b90508281526020810184848401111561057f5761057e610490565b5b61058a848285610541565b509392505050565b600082601f8301126105a7576105a661048b565b5b81356105b7848260208601610550565b91505092915050565b600080604083850312156105d7576105d6610282565b5b60006105e5858286016102d5565b925050602083013567ffffffffffffffff81111561060657610605610287565b5b61061285828601610592565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061066357607f821691505b6020821081036106765761067561061c565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b6000600883026106de7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff826106a1565b6106e886836106a1565b95508019841693508086168417925050509392505050565b6000819050919050565b6000819050919050565b600061072f61072a61072584610700565b61070a565b610700565b9050919050565b6000819050919050565b61074983610714565b61075d61075582610736565b8484546106ae565b825550505050565b600090565b610772610765565b61077d818484610740565b505050565b5b818110156107a15761079660008261076a565b600181019050610783565b5050565b601f8211156107e6576107b78161067c565b6107c084610691565b810160208510156107cf578190505b6107e36107db85610691565b830182610782565b50505b505050565b600082821c905092915050565b6000610809600019846008026107eb565b1980831691505092915050565b600061082283836107f8565b9150826002028217905092915050565b61083b82610343565b67ffffffffffffffff81111561085457610853610495565b5b61085e825461064b565b6108698282856107a5565b600060209050601f83116001811461089c576000841561088a578287015190505b6108948582610816565b8655506108fc565b601f1984166108aa8661067c565b60005b828110156108d2578489015182556001820191506020850194506020810190506108ad565b868310156108ef57848901516108eb601f8916826107f8565b8355505b6001600288020188555050505b505050505050565b600082825260208201905092915050565b600061092082610343565b61092a8185610904565b935061093a81856020860161035f565b61094381610389565b840191505092915050565b600060208201905081810360008301526109688184610915565b90509291505056fea2646970667358221220c8b6738153edd0e29ad67b2a66fbe75975a05964f42a088a3e738bf3ea8c4de864736f6c63430008140033";

type MessageContractConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MessageContractConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MessageContract__factory extends ContractFactory {
  constructor(...args: MessageContractConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<MessageContract> {
    return super.deploy(overrides || {}) as Promise<MessageContract>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): MessageContract {
    return super.attach(address) as MessageContract;
  }
  override connect(signer: Signer): MessageContract__factory {
    return super.connect(signer) as MessageContract__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MessageContractInterface {
    return new utils.Interface(_abi) as MessageContractInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MessageContract {
    return new Contract(address, _abi, signerOrProvider) as MessageContract;
  }
}
