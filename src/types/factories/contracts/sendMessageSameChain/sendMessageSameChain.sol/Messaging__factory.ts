/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../../common";
import type {
  Messaging,
  MessagingInterface,
} from "../../../../contracts/sendMessageSameChain/sendMessageSameChain.sol/Messaging";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        indexed: false,
        internalType: "string",
        name: "content",
        type: "string",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "timestamp",
        type: "uint256",
      },
    ],
    name: "MessageSent",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_to",
        type: "address",
      },
    ],
    name: "getMessages",
    outputs: [
      {
        components: [
          {
            internalType: "address",
            name: "sender",
            type: "address",
          },
          {
            internalType: "string",
            name: "content",
            type: "string",
          },
          {
            internalType: "uint256",
            name: "timestamp",
            type: "uint256",
          },
        ],
        internalType: "struct Messaging.Message[]",
        name: "",
        type: "tuple[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_from",
        type: "address",
      },
    ],
    name: "getMessagesFrom",
    outputs: [
      {
        components: [
          {
            internalType: "address",
            name: "sender",
            type: "address",
          },
          {
            internalType: "string",
            name: "content",
            type: "string",
          },
          {
            internalType: "uint256",
            name: "timestamp",
            type: "uint256",
          },
        ],
        internalType: "struct Messaging.Message[]",
        name: "",
        type: "tuple[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_to",
        type: "address",
      },
      {
        internalType: "string",
        name: "_content",
        type: "string",
      },
    ],
    name: "sendMessage",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b506111b2806100206000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c80636294bfec14610046578063b2f7132214610076578063de6f24bb146100a6575b600080fd5b610060600480360381019061005b9190610985565b6100c2565b60405161006d9190610b7c565b60405180910390f35b610090600480360381019061008b9190610985565b6104e9565b60405161009d9190610b7c565b60405180910390f35b6100c060048036038101906100bb9190610c03565b610678565b005b606060008060005b6000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020805490508110156101e9578473ffffffffffffffffffffffffffffffffffffffff166000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020828154811061017a57610179610c63565b5b906000526020600020906003020160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16036101d65782806101d290610cc1565b9350505b80806101e190610cc1565b9150506100ca565b5060008267ffffffffffffffff81111561020657610205610d09565b5b60405190808252806020026020018201604052801561023f57816020015b61022c6108e6565b8152602001906001900390816102245790505b50905060005b6000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020805490508110156104dd578573ffffffffffffffffffffffffffffffffffffffff166000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002082815481106102f5576102f4610c63565b5b906000526020600020906003020160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16036104ca576000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020818154811061039257610391610c63565b5b90600052602060002090600302016040518060600160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160018201805461041190610d67565b80601f016020809104026020016040519081016040528092919081815260200182805461043d90610d67565b801561048a5780601f1061045f5761010080835404028352916020019161048a565b820191906000526020600020905b81548152906001019060200180831161046d57829003601f168201915b505050505081526020016002820154815250508284815181106104b0576104af610c63565b5b602002602001018190525082806104c690610cc1565b9350505b80806104d590610cc1565b915050610245565b50809350505050919050565b60606000808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020805480602002602001604051908101604052809291908181526020016000905b8282101561066d57838290600052602060002090600302016040518060600160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016001820180546105d290610d67565b80601f01602080910402602001604051908101604052809291908181526020018280546105fe90610d67565b801561064b5780601f106106205761010080835404028352916020019161064b565b820191906000526020600020905b81548152906001019060200180831161062e57829003601f168201915b5050505050815260200160028201548152505081526020019060010190610549565b505050509050919050565b600082829050116106be576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106b590610df5565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff160361072d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161072490610e61565b60405180910390fd5b600060405180606001604052803373ffffffffffffffffffffffffffffffffffffffff16815260200184848080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f8201169050808301925050505050505081526020014281525090506000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081908060018154018082558091505060019003906000526020600020906003020160009091909190915060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550602082015181600101908161086a919061102d565b506040820151816002015550508373ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f7e49d574e0305424aa957cb3f69b25f92aa58d53fdee73f05e40019210a70bce8585426040516108d89392919061114a565b60405180910390a350505050565b6040518060600160405280600073ffffffffffffffffffffffffffffffffffffffff16815260200160608152602001600081525090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061095282610927565b9050919050565b61096281610947565b811461096d57600080fd5b50565b60008135905061097f81610959565b92915050565b60006020828403121561099b5761099a61091d565b5b60006109a984828501610970565b91505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6109e781610947565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b83811015610a27578082015181840152602081019050610a0c565b60008484015250505050565b6000601f19601f8301169050919050565b6000610a4f826109ed565b610a5981856109f8565b9350610a69818560208601610a09565b610a7281610a33565b840191505092915050565b6000819050919050565b610a9081610a7d565b82525050565b6000606083016000830151610aae60008601826109de565b5060208301518482036020860152610ac68282610a44565b9150506040830151610adb6040860182610a87565b508091505092915050565b6000610af28383610a96565b905092915050565b6000602082019050919050565b6000610b12826109b2565b610b1c81856109bd565b935083602082028501610b2e856109ce565b8060005b85811015610b6a5784840389528151610b4b8582610ae6565b9450610b5683610afa565b925060208a01995050600181019050610b32565b50829750879550505050505092915050565b60006020820190508181036000830152610b968184610b07565b905092915050565b600080fd5b600080fd5b600080fd5b60008083601f840112610bc357610bc2610b9e565b5b8235905067ffffffffffffffff811115610be057610bdf610ba3565b5b602083019150836001820283011115610bfc57610bfb610ba8565b5b9250929050565b600080600060408486031215610c1c57610c1b61091d565b5b6000610c2a86828701610970565b935050602084013567ffffffffffffffff811115610c4b57610c4a610922565b5b610c5786828701610bad565b92509250509250925092565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610ccc82610a7d565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203610cfe57610cfd610c92565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680610d7f57607f821691505b602082108103610d9257610d91610d38565b5b50919050565b600082825260208201905092915050565b7f4d65737361676520636f6e74656e742063616e6e6f7420626520656d70747900600082015250565b6000610ddf601f83610d98565b9150610dea82610da9565b602082019050919050565b60006020820190508181036000830152610e0e81610dd2565b9050919050565b7f496e76616c696420616464726573730000000000000000000000000000000000600082015250565b6000610e4b600f83610d98565b9150610e5682610e15565b602082019050919050565b60006020820190508181036000830152610e7a81610e3e565b9050919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b600060088302610ee37fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82610ea6565b610eed8683610ea6565b95508019841693508086168417925050509392505050565b6000819050919050565b6000610f2a610f25610f2084610a7d565b610f05565b610a7d565b9050919050565b6000819050919050565b610f4483610f0f565b610f58610f5082610f31565b848454610eb3565b825550505050565b600090565b610f6d610f60565b610f78818484610f3b565b505050565b5b81811015610f9c57610f91600082610f65565b600181019050610f7e565b5050565b601f821115610fe157610fb281610e81565b610fbb84610e96565b81016020851015610fca578190505b610fde610fd685610e96565b830182610f7d565b50505b505050565b600082821c905092915050565b600061100460001984600802610fe6565b1980831691505092915050565b600061101d8383610ff3565b9150826002028217905092915050565b611036826109ed565b67ffffffffffffffff81111561104f5761104e610d09565b5b6110598254610d67565b611064828285610fa0565b600060209050601f8311600181146110975760008415611085578287015190505b61108f8582611011565b8655506110f7565b601f1984166110a586610e81565b60005b828110156110cd578489015182556001820191506020850194506020810190506110a8565b868310156110ea57848901516110e6601f891682610ff3565b8355505b6001600288020188555050505b505050505050565b82818337600083830152505050565b600061111a8385610d98565b93506111278385846110ff565b61113083610a33565b840190509392505050565b61114481610a7d565b82525050565b6000604082019050818103600083015261116581858761110e565b9050611174602083018461113b565b94935050505056fea26469706673582212206ed77d83089069af07778364f62a2c8d6d77bd02affe3bd7deabb952f1789ac464736f6c63430008140033";

type MessagingConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MessagingConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Messaging__factory extends ContractFactory {
  constructor(...args: MessagingConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<Messaging> {
    return super.deploy(overrides || {}) as Promise<Messaging>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): Messaging {
    return super.attach(address) as Messaging;
  }
  override connect(signer: Signer): Messaging__factory {
    return super.connect(signer) as Messaging__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MessagingInterface {
    return new utils.Interface(_abi) as MessagingInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): Messaging {
    return new Contract(address, _abi, signerOrProvider) as Messaging;
  }
}
