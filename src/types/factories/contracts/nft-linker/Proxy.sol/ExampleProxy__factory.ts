/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Signer,
  utils,
  Contract,
  ContractFactory,
  BytesLike,
  Overrides,
} from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../../common";
import type {
  ExampleProxy,
  ExampleProxyInterface,
} from "../../../../contracts/nft-linker/Proxy.sol/ExampleProxy";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "implementationAddress",
        type: "address",
      },
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        internalType: "bytes",
        name: "setupParams",
        type: "bytes",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "AlreadyInitialized",
    type: "error",
  },
  {
    inputs: [],
    name: "InvalidImplementation",
    type: "error",
  },
  {
    inputs: [],
    name: "InvalidOwner",
    type: "error",
  },
  {
    inputs: [],
    name: "NotOwner",
    type: "error",
  },
  {
    inputs: [],
    name: "SetupFailed",
    type: "error",
  },
  {
    stateMutability: "payable",
    type: "fallback",
  },
  {
    inputs: [],
    name: "implementation",
    outputs: [
      {
        internalType: "address",
        name: "implementation_",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "params",
        type: "bytes",
      },
    ],
    name: "setup",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    stateMutability: "payable",
    type: "receive",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b506040516108cd3803806108cd833981810160405281019061003291906104ed565b828282600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141561009c576040517f49e27cff00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60006100ac6102e960201b60201c565b90506000801b811415801561013e5750808473ffffffffffffffffffffffffffffffffffffffff16638291286c6040518163ffffffff1660e01b815260040160206040518083038186803b15801561010357600080fd5b505afa158015610117573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061013b9190610592565b14155b15610175576040517f68155f9a00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b837f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc55827f02016836a56b71f0d02689e69e326f4f4c1b9057164ef592671cf0d37c8040c05560008251146102dd5760008473ffffffffffffffffffffffffffffffffffffffff16639ded06df60e01b846040516024016101f69190610614565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506040516102609190610672565b600060405180830381855af49150503d806000811461029b576040519150601f19603f3d011682016040523d82523d6000602084013e6102a0565b606091505b50509050806102db576040517f97905dfb00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b505b50505050505050610689565b60007f6ec6af55bf1e5f27006bfa01248d73e8894ba06f23f8002b047607ff2b1944bb905090565b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061035082610325565b9050919050565b61036081610345565b811461036b57600080fd5b50565b60008151905061037d81610357565b92915050565b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6103d68261038d565b810181811067ffffffffffffffff821117156103f5576103f461039e565b5b80604052505050565b6000610408610311565b905061041482826103cd565b919050565b600067ffffffffffffffff8211156104345761043361039e565b5b61043d8261038d565b9050602081019050919050565b60005b8381101561046857808201518184015260208101905061044d565b83811115610477576000848401525b50505050565b600061049061048b84610419565b6103fe565b9050828152602081018484840111156104ac576104ab610388565b5b6104b784828561044a565b509392505050565b600082601f8301126104d4576104d3610383565b5b81516104e484826020860161047d565b91505092915050565b6000806000606084860312156105065761050561031b565b5b60006105148682870161036e565b93505060206105258682870161036e565b925050604084015167ffffffffffffffff81111561054657610545610320565b5b610552868287016104bf565b9150509250925092565b6000819050919050565b61056f8161055c565b811461057a57600080fd5b50565b60008151905061058c81610566565b92915050565b6000602082840312156105a8576105a761031b565b5b60006105b68482850161057d565b91505092915050565b600081519050919050565b600082825260208201905092915050565b60006105e6826105bf565b6105f081856105ca565b935061060081856020860161044a565b6106098161038d565b840191505092915050565b6000602082019050818103600083015261062e81846105db565b905092915050565b600081905092915050565b600061064c826105bf565b6106568185610636565b935061066681856020860161044a565b80840191505092915050565b600061067e8284610641565b915081905092915050565b610235806106986000396000f3fe60806040526004361061002d5760003560e01c80635c60da1b146100665780639ded06df1461009157610034565b3661003457005b600061003e6100ba565b90503660008037600080366000845af43d6000803e8060008114610061573d6000f35b3d6000fd5b34801561007257600080fd5b5061007b6100ba565b6040516100889190610128565b60405180910390f35b34801561009d57600080fd5b506100b860048036038101906100b391906101b2565b6100e3565b005b60007f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc54905090565b5050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610112826100e7565b9050919050565b61012281610107565b82525050565b600060208201905061013d6000830184610119565b92915050565b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b60008083601f8401126101725761017161014d565b5b8235905067ffffffffffffffff81111561018f5761018e610152565b5b6020830191508360018202830111156101ab576101aa610157565b5b9250929050565b600080602083850312156101c9576101c8610143565b5b600083013567ffffffffffffffff8111156101e7576101e6610148565b5b6101f38582860161015c565b9250925050925092905056fea264697066735822122028f83bcab6e0a3edab895ac61dc0abf9cf11efbadadc1156d99116682b1adbf664736f6c63430008090033";

type ExampleProxyConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ExampleProxyConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class ExampleProxy__factory extends ContractFactory {
  constructor(...args: ExampleProxyConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    implementationAddress: PromiseOrValue<string>,
    owner: PromiseOrValue<string>,
    setupParams: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ExampleProxy> {
    return super.deploy(
      implementationAddress,
      owner,
      setupParams,
      overrides || {}
    ) as Promise<ExampleProxy>;
  }
  override getDeployTransaction(
    implementationAddress: PromiseOrValue<string>,
    owner: PromiseOrValue<string>,
    setupParams: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(
      implementationAddress,
      owner,
      setupParams,
      overrides || {}
    );
  }
  override attach(address: string): ExampleProxy {
    return super.attach(address) as ExampleProxy;
  }
  override connect(signer: Signer): ExampleProxy__factory {
    return super.connect(signer) as ExampleProxy__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ExampleProxyInterface {
    return new utils.Interface(_abi) as ExampleProxyInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): ExampleProxy {
    return new Contract(address, _abi, signerOrProvider) as ExampleProxy;
  }
}
