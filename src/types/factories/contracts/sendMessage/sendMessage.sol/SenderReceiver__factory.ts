/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../../common";
import type {
  SenderReceiver,
  SenderReceiverInterface,
} from "../../../../contracts/sendMessage/sendMessage.sol/SenderReceiver";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "gateway_",
        type: "address",
      },
      {
        internalType: "address",
        name: "gasService_",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "InvalidAddress",
    type: "error",
  },
  {
    inputs: [],
    name: "NotApprovedByGateway",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "string",
        name: "_from",
        type: "string",
      },
      {
        indexed: false,
        internalType: "string",
        name: "_message",
        type: "string",
      },
    ],
    name: "Executed",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "commandId",
        type: "bytes32",
      },
      {
        internalType: "string",
        name: "sourceChain",
        type: "string",
      },
      {
        internalType: "string",
        name: "sourceAddress",
        type: "string",
      },
      {
        internalType: "bytes",
        name: "payload",
        type: "bytes",
      },
    ],
    name: "execute",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "commandId",
        type: "bytes32",
      },
      {
        internalType: "string",
        name: "sourceChain",
        type: "string",
      },
      {
        internalType: "string",
        name: "sourceAddress",
        type: "string",
      },
      {
        internalType: "bytes",
        name: "payload",
        type: "bytes",
      },
      {
        internalType: "string",
        name: "tokenSymbol",
        type: "string",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "executeWithToken",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "gasService",
    outputs: [
      {
        internalType: "contract IAxelarGasService",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "gateway",
    outputs: [
      {
        internalType: "contract IAxelarGateway",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "message",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "destinationChain",
        type: "string",
      },
      {
        internalType: "string",
        name: "destinationAddress",
        type: "string",
      },
      {
        internalType: "string",
        name: "message_",
        type: "string",
      },
    ],
    name: "sendMessage",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [],
    name: "sourceAddress",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "sourceChain",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60c060405234801561001057600080fd5b50604051610e50380380610e5083398101604081905261002f9161008b565b816001600160a01b0381166100575760405163e6c4247b60e01b815260040160405180910390fd5b6001600160a01b039081166080521660a052506100be565b80516001600160a01b038116811461008657600080fd5b919050565b6000806040838503121561009e57600080fd5b6100a78361006f565b91506100b56020840161006f565b90509250929050565b60805160a051610d526100fe6000396000818161015a01526101fb01526000818160a70152818161029d0152818161036201526104f30152610d526000f3fe60806040526004361061007b5760003560e01c8063491606581161004e57806349160658146101285780636a22d8cc14610148578063b0fa84441461017c578063e21f37ce1461019157600080fd5b80630eabeffe14610080578063116191b6146100955780631a98b2e0146100e65780631c6ffa4614610106575b600080fd5b61009361008e36600461071a565b6101a6565b005b3480156100a157600080fd5b506100c97f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020015b60405180910390f35b3480156100f257600080fd5b506100936101013660046107b4565b610318565b34801561011257600080fd5b5061011b61041b565b6040516100dd91906108db565b34801561013457600080fd5b506100936101433660046108f5565b6104a9565b34801561015457600080fd5b506100c97f000000000000000000000000000000000000000000000000000000000000000081565b34801561018857600080fd5b5061011b6105b9565b34801561019d57600080fd5b5061011b6105c6565b600082826040516020016101bb9291906109c2565b60408051601f19818403018152908290527f0c93e3bb00000000000000000000000000000000000000000000000000000000825291506001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690630c93e3bb90349061023e9030908c908c908c908c908a9033906004016109de565b6000604051808303818588803b15801561025757600080fd5b505af115801561026b573d6000803e3d6000fd5b50506040517f1c92115f0000000000000000000000000000000000000000000000000000000081526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169350631c92115f92506102dd91508a908a908a908a908890600401610a41565b600060405180830381600087803b1580156102f757600080fd5b505af115801561030b573d6000803e3d6000fd5b5050505050505050505050565b6000858560405161032a929190610a88565b6040519081900381207f1876eed900000000000000000000000000000000000000000000000000000000825291506001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690631876eed9906103a7908e908e908e908e908e9089908d908d908d90600401610a98565b602060405180830381600087803b1580156103c157600080fd5b505af11580156103d5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103f99190610af7565b61041657604051631403112d60e21b815260040160405180910390fd5b61030b565b6001805461042890610b19565b80601f016020809104026020016040519081016040528092919081815260200182805461045490610b19565b80156104a15780601f10610476576101008083540402835291602001916104a1565b820191906000526020600020905b81548152906001019060200180831161048457829003601f168201915b505050505081565b600082826040516104bb929190610a88565b6040519081900381207f5f6970c300000000000000000000000000000000000000000000000000000000825291506001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690635f6970c390610532908b908b908b908b908b908990600401610b54565b602060405180830381600087803b15801561054c57600080fd5b505af1158015610560573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105849190610af7565b6105a157604051631403112d60e21b815260040160405180910390fd5b6105af8787878787876105d3565b5050505050505050565b6002805461042890610b19565b6000805461042890610b19565b6105df81830183610bab565b80516105f391600091602090910190610638565b507f0d97a9033491f569feb4c72abf12722b227eec24ee13547bec3654f8663ff7118484600060405161062893929190610c5c565b60405180910390a1505050505050565b82805461064490610b19565b90600052602060002090601f01602090048101928261066657600085556106ac565b82601f1061067f57805160ff19168380011785556106ac565b828001600101855582156106ac579182015b828111156106ac578251825591602001919060010190610691565b506106b89291506106bc565b5090565b5b808211156106b857600081556001016106bd565b60008083601f8401126106e357600080fd5b50813567ffffffffffffffff8111156106fb57600080fd5b60208301915083602082850101111561071357600080fd5b9250929050565b6000806000806000806060878903121561073357600080fd5b863567ffffffffffffffff8082111561074b57600080fd5b6107578a838b016106d1565b9098509650602089013591508082111561077057600080fd5b61077c8a838b016106d1565b9096509450604089013591508082111561079557600080fd5b506107a289828a016106d1565b979a9699509497509295939492505050565b60008060008060008060008060008060c08b8d0312156107d357600080fd5b8a35995060208b013567ffffffffffffffff808211156107f257600080fd5b6107fe8e838f016106d1565b909b50995060408d013591508082111561081757600080fd5b6108238e838f016106d1565b909950975060608d013591508082111561083c57600080fd5b6108488e838f016106d1565b909750955060808d013591508082111561086157600080fd5b5061086e8d828e016106d1565b9150809450508092505060a08b013590509295989b9194979a5092959850565b6000815180845260005b818110156108b457602081850181015186830182015201610898565b818111156108c6576000602083870101525b50601f01601f19169290920160200192915050565b6020815260006108ee602083018461088e565b9392505050565b60008060008060008060006080888a03121561091057600080fd5b87359650602088013567ffffffffffffffff8082111561092f57600080fd5b61093b8b838c016106d1565b909850965060408a013591508082111561095457600080fd5b6109608b838c016106d1565b909650945060608a013591508082111561097957600080fd5b506109868a828b016106d1565b989b979a50959850939692959293505050565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b6020815260006109d6602083018486610999565b949350505050565b60006001600160a01b03808a16835260a06020840152610a0260a08401898b610999565b8381036040850152610a1581888a610999565b90508381036060850152610a29818761088e565b92505080841660808401525098975050505050505050565b606081526000610a55606083018789610999565b8281036020840152610a68818688610999565b90508281036040840152610a7c818561088e565b98975050505050505050565b8183823760009101908152919050565b89815260c060208201526000610ab260c083018a8c610999565b8281036040840152610ac581898b610999565b90508660608401528281036080840152610ae0818688610999565b9150508260a08301529a9950505050505050505050565b600060208284031215610b0957600080fd5b815180151581146108ee57600080fd5b600181811c90821680610b2d57607f821691505b60208210811415610b4e57634e487b7160e01b600052602260045260246000fd5b50919050565b868152608060208201526000610b6e608083018789610999565b8281036040840152610b81818688610999565b915050826060830152979650505050505050565b634e487b7160e01b600052604160045260246000fd5b600060208284031215610bbd57600080fd5b813567ffffffffffffffff80821115610bd557600080fd5b818401915084601f830112610be957600080fd5b813581811115610bfb57610bfb610b95565b604051601f8201601f19908116603f01168101908382118183101715610c2357610c23610b95565b81604052828152876020848701011115610c3c57600080fd5b826020860160208301376000928101602001929092525095945050505050565b604081526000610c70604083018587610999565b6020838203818501526000855481600182811c915080831680610c9457607f831692505b858310811415610cb257634e487b7160e01b85526022600452602485fd5b828752602087019650808015610ccf5760018114610ce057610d0b565b60ff19851688528688019550610d0b565b60008b81526020902060005b85811015610d055781548a820152908401908801610cec565b89019650505b50939b9a505050505050505050505056fea26469706673582212200fd7a0f31e45b59272436ed195327200e242b4183be9578d7e25d809ca0dfe1764736f6c63430008090033";

type SenderReceiverConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: SenderReceiverConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class SenderReceiver__factory extends ContractFactory {
  constructor(...args: SenderReceiverConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    gateway_: PromiseOrValue<string>,
    gasService_: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<SenderReceiver> {
    return super.deploy(
      gateway_,
      gasService_,
      overrides || {}
    ) as Promise<SenderReceiver>;
  }
  override getDeployTransaction(
    gateway_: PromiseOrValue<string>,
    gasService_: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(gateway_, gasService_, overrides || {});
  }
  override attach(address: string): SenderReceiver {
    return super.attach(address) as SenderReceiver;
  }
  override connect(signer: Signer): SenderReceiver__factory {
    return super.connect(signer) as SenderReceiver__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): SenderReceiverInterface {
    return new utils.Interface(_abi) as SenderReceiverInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): SenderReceiver {
    return new Contract(address, _abi, signerOrProvider) as SenderReceiver;
  }
}
