/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../../common";
import type {
  SenderReceiver,
  SenderReceiverInterface,
} from "../../../../contracts/sendMessage/sendMessage.sol/SenderReceiver";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "gateway_",
        type: "address",
      },
      {
        internalType: "address",
        name: "gasService_",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "InvalidAddress",
    type: "error",
  },
  {
    inputs: [],
    name: "NotApprovedByGateway",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "string",
        name: "_from",
        type: "string",
      },
      {
        indexed: false,
        internalType: "string",
        name: "_message",
        type: "string",
      },
    ],
    name: "Executed",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "commandId",
        type: "bytes32",
      },
      {
        internalType: "string",
        name: "sourceChain",
        type: "string",
      },
      {
        internalType: "string",
        name: "sourceAddress",
        type: "string",
      },
      {
        internalType: "bytes",
        name: "payload",
        type: "bytes",
      },
    ],
    name: "execute",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "commandId",
        type: "bytes32",
      },
      {
        internalType: "string",
        name: "sourceChain",
        type: "string",
      },
      {
        internalType: "string",
        name: "sourceAddress",
        type: "string",
      },
      {
        internalType: "bytes",
        name: "payload",
        type: "bytes",
      },
      {
        internalType: "string",
        name: "tokenSymbol",
        type: "string",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "executeWithToken",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "gasService",
    outputs: [
      {
        internalType: "contract IAxelarGasService",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "gateway",
    outputs: [
      {
        internalType: "contract IAxelarGateway",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "message",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "destinationChain",
        type: "string",
      },
      {
        internalType: "string",
        name: "destinationAddress",
        type: "string",
      },
      {
        internalType: "string",
        name: "message_",
        type: "string",
      },
    ],
    name: "sendMessage",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [],
    name: "sourceAddress",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "sourceChain",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60c06040523480156200001157600080fd5b50604051620015cf380380620015cf83398181016040528101906200003791906200017b565b81600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415620000a0576040517fe6c4247b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1681525050508073ffffffffffffffffffffffffffffffffffffffff1660a08173ffffffffffffffffffffffffffffffffffffffff16815250505050620001c2565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620001438262000116565b9050919050565b620001558162000136565b81146200016157600080fd5b50565b60008151905062000175816200014a565b92915050565b6000806040838503121562000195576200019462000111565b5b6000620001a58582860162000164565b9250506020620001b88582860162000164565b9150509250929050565b60805160a0516113cb62000204600039600081816101ed015261061d0152600081816102850152818161032101528181610361015261051a01526113cb6000f3fe60806040526004361061007b5760003560e01c8063491606581161004e578063491606581461011b5780636a22d8cc14610144578063b0fa84441461016f578063e21f37ce1461019a5761007b565b80630eabeffe14610080578063116191b61461009c5780631a98b2e0146100c75780631c6ffa46146100f0575b600080fd5b61009a600480360381019061009591906108eb565b6101c5565b005b3480156100a857600080fd5b506100b161031f565b6040516100be9190610a1e565b60405180910390f35b3480156100d357600080fd5b506100ee60048036038101906100e99190610afb565b610343565b005b3480156100fc57600080fd5b5061010561046e565b6040516101129190610ca4565b60405180910390f35b34801561012757600080fd5b50610142600480360381019061013d9190610cc6565b6104fc565b005b34801561015057600080fd5b5061015961061b565b6040516101669190610db0565b60405180910390f35b34801561017b57600080fd5b5061018461063f565b6040516101919190610ca4565b60405180910390f35b3480156101a657600080fd5b506101af6106cd565b6040516101bc9190610ca4565b60405180910390f35b600082826040516020016101da929190610e07565b60405160208183030381529060405290507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16630c93e3bb34308a8a8a8a88336040518963ffffffff1660e01b81526004016102519796959493929190610ea1565b6000604051808303818588803b15801561026a57600080fd5b505af115801561027e573d6000803e3d6000fd5b50505050507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16631c92115f88888888866040518663ffffffff1660e01b81526004016102e4959493929190610f0d565b600060405180830381600087803b1580156102fe57600080fd5b505af1158015610312573d6000803e3d6000fd5b5050505050505050505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b60008585604051610355929190610f8d565b604051809103902090507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16631876eed98c8c8c8c8c878b8b8b6040518a63ffffffff1660e01b81526004016103c899989796959493929190610fc4565b602060405180830381600087803b1580156103e257600080fd5b505af11580156103f6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061041a9190611078565b610450576040517f500c44b400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6104618a8a8a8a8a8a8a8a8a61075b565b5050505050505050505050565b6001805461047b906110d4565b80601f01602080910402602001604051908101604052809291908181526020018280546104a7906110d4565b80156104f45780601f106104c9576101008083540402835291602001916104f4565b820191906000526020600020905b8154815290600101906020018083116104d757829003601f168201915b505050505081565b6000828260405161050e929190610f8d565b604051809103902090507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16635f6970c38989898989876040518763ffffffff1660e01b815260040161057b96959493929190611106565b602060405180830381600087803b15801561059557600080fd5b505af11580156105a9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105cd9190611078565b610603576040517f500c44b400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b610611878787878787610766565b5050505050505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b6002805461064c906110d4565b80601f0160208091040260200160405190810160405280929190818152602001828054610678906110d4565b80156106c55780601f1061069a576101008083540402835291602001916106c5565b820191906000526020600020905b8154815290600101906020018083116106a857829003601f168201915b505050505081565b600080546106da906110d4565b80601f0160208091040260200160405190810160405280929190818152602001828054610706906110d4565b80156107535780601f1061072857610100808354040283529160200191610753565b820191906000526020600020905b81548152906001019060200180831161073657829003601f168201915b505050505081565b505050505050505050565b8181810190610775919061127e565b6000908051906020019061078a9291906107cf565b507f0d97a9033491f569feb4c72abf12722b227eec24ee13547bec3654f8663ff711848460006040516107bf9392919061135c565b60405180910390a1505050505050565b8280546107db906110d4565b90600052602060002090601f0160209004810192826107fd5760008555610844565b82601f1061081657805160ff1916838001178555610844565b82800160010185558215610844579182015b82811115610843578251825591602001919060010190610828565b5b5090506108519190610855565b5090565b5b8082111561086e576000816000905550600101610856565b5090565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b60008083601f8401126108ab576108aa610886565b5b8235905067ffffffffffffffff8111156108c8576108c761088b565b5b6020830191508360018202830111156108e4576108e3610890565b5b9250929050565b600080600080600080606087890312156109085761090761087c565b5b600087013567ffffffffffffffff81111561092657610925610881565b5b61093289828a01610895565b9650965050602087013567ffffffffffffffff81111561095557610954610881565b5b61096189828a01610895565b9450945050604087013567ffffffffffffffff81111561098457610983610881565b5b61099089828a01610895565b92509250509295509295509295565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b60006109e46109df6109da8461099f565b6109bf565b61099f565b9050919050565b60006109f6826109c9565b9050919050565b6000610a08826109eb565b9050919050565b610a18816109fd565b82525050565b6000602082019050610a336000830184610a0f565b92915050565b6000819050919050565b610a4c81610a39565b8114610a5757600080fd5b50565b600081359050610a6981610a43565b92915050565b60008083601f840112610a8557610a84610886565b5b8235905067ffffffffffffffff811115610aa257610aa161088b565b5b602083019150836001820283011115610abe57610abd610890565b5b9250929050565b6000819050919050565b610ad881610ac5565b8114610ae357600080fd5b50565b600081359050610af581610acf565b92915050565b60008060008060008060008060008060c08b8d031215610b1e57610b1d61087c565b5b6000610b2c8d828e01610a5a565b9a505060208b013567ffffffffffffffff811115610b4d57610b4c610881565b5b610b598d828e01610895565b995099505060408b013567ffffffffffffffff811115610b7c57610b7b610881565b5b610b888d828e01610895565b975097505060608b013567ffffffffffffffff811115610bab57610baa610881565b5b610bb78d828e01610a6f565b955095505060808b013567ffffffffffffffff811115610bda57610bd9610881565b5b610be68d828e01610895565b935093505060a0610bf98d828e01610ae6565b9150509295989b9194979a5092959850565b600081519050919050565b600082825260208201905092915050565b60005b83811015610c45578082015181840152602081019050610c2a565b83811115610c54576000848401525b50505050565b6000601f19601f8301169050919050565b6000610c7682610c0b565b610c808185610c16565b9350610c90818560208601610c27565b610c9981610c5a565b840191505092915050565b60006020820190508181036000830152610cbe8184610c6b565b905092915050565b60008060008060008060006080888a031215610ce557610ce461087c565b5b6000610cf38a828b01610a5a565b975050602088013567ffffffffffffffff811115610d1457610d13610881565b5b610d208a828b01610895565b9650965050604088013567ffffffffffffffff811115610d4357610d42610881565b5b610d4f8a828b01610895565b9450945050606088013567ffffffffffffffff811115610d7257610d71610881565b5b610d7e8a828b01610a6f565b925092505092959891949750929550565b6000610d9a826109eb565b9050919050565b610daa81610d8f565b82525050565b6000602082019050610dc56000830184610da1565b92915050565b82818337600083830152505050565b6000610de68385610c16565b9350610df3838584610dcb565b610dfc83610c5a565b840190509392505050565b60006020820190508181036000830152610e22818486610dda565b90509392505050565b6000610e368261099f565b9050919050565b610e4681610e2b565b82525050565b600081519050919050565b600082825260208201905092915050565b6000610e7382610e4c565b610e7d8185610e57565b9350610e8d818560208601610c27565b610e9681610c5a565b840191505092915050565b600060a082019050610eb6600083018a610e3d565b8181036020830152610ec981888a610dda565b90508181036040830152610ede818688610dda565b90508181036060830152610ef28185610e68565b9050610f016080830184610e3d565b98975050505050505050565b60006060820190508181036000830152610f28818789610dda565b90508181036020830152610f3d818587610dda565b90508181036040830152610f518184610e68565b90509695505050505050565b600081905092915050565b6000610f748385610f5d565b9350610f81838584610dcb565b82840190509392505050565b6000610f9a828486610f68565b91508190509392505050565b610faf81610a39565b82525050565b610fbe81610ac5565b82525050565b600060c082019050610fd9600083018c610fa6565b8181036020830152610fec818a8c610dda565b9050818103604083015261100181888a610dda565b90506110106060830187610fa6565b8181036080830152611023818587610dda565b905061103260a0830184610fb5565b9a9950505050505050505050565b60008115159050919050565b61105581611040565b811461106057600080fd5b50565b6000815190506110728161104c565b92915050565b60006020828403121561108e5761108d61087c565b5b600061109c84828501611063565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806110ec57607f821691505b60208210811415611100576110ff6110a5565b5b50919050565b600060808201905061111b6000830189610fa6565b818103602083015261112e818789610dda565b90508181036040830152611143818587610dda565b90506111526060830184610fa6565b979650505050505050565b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b61119a82610c5a565b810181811067ffffffffffffffff821117156111b9576111b8611162565b5b80604052505050565b60006111cc610872565b90506111d88282611191565b919050565b600067ffffffffffffffff8211156111f8576111f7611162565b5b61120182610c5a565b9050602081019050919050565b600061122161121c846111dd565b6111c2565b90508281526020810184848401111561123d5761123c61115d565b5b611248848285610dcb565b509392505050565b600082601f83011261126557611264610886565b5b813561127584826020860161120e565b91505092915050565b6000602082840312156112945761129361087c565b5b600082013567ffffffffffffffff8111156112b2576112b1610881565b5b6112be84828501611250565b91505092915050565b60008190508160005260206000209050919050565b600081546112e9816110d4565b6112f38186610c16565b9450600182166000811461130e576001811461132057611353565b60ff1983168652602086019350611353565b611329856112c7565b60005b8381101561134b5781548189015260018201915060208101905061132c565b808801955050505b50505092915050565b60006040820190508181036000830152611377818587610dda565b9050818103602083015261138b81846112dc565b905094935050505056fea2646970667358221220ead8119dfa56c26762f607517881fdc11cfc80a973b64537cb65524b78b9328264736f6c63430008090033";

type SenderReceiverConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: SenderReceiverConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class SenderReceiver__factory extends ContractFactory {
  constructor(...args: SenderReceiverConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    gateway_: PromiseOrValue<string>,
    gasService_: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<SenderReceiver> {
    return super.deploy(
      gateway_,
      gasService_,
      overrides || {}
    ) as Promise<SenderReceiver>;
  }
  override getDeployTransaction(
    gateway_: PromiseOrValue<string>,
    gasService_: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(gateway_, gasService_, overrides || {});
  }
  override attach(address: string): SenderReceiver {
    return super.attach(address) as SenderReceiver;
  }
  override connect(signer: Signer): SenderReceiver__factory {
    return super.connect(signer) as SenderReceiver__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): SenderReceiverInterface {
    return new utils.Interface(_abi) as SenderReceiverInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): SenderReceiver {
    return new Contract(address, _abi, signerOrProvider) as SenderReceiver;
  }
}
