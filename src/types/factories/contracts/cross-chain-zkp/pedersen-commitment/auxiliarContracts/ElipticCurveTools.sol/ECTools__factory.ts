/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../../../../common";
import type {
  ECTools,
  ECToolsInterface,
} from "../../../../../../contracts/cross-chain-zkp/pedersen-commitment/auxiliarContracts/ElipticCurveTools.sol/ECTools";

const _abi = [
  {
    inputs: [],
    name: "Gx",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "Gy",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "Hx",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "Hy",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "a",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "b",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "h1",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "n",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "p",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x610301610053600b82828239805160001a607314610046577f4e487b7100000000000000000000000000000000000000000000000000000000600052600060045260246000fd5b30600052607381538281f3fe730000000000000000000000000000000000000000301460806040526004361061009d5760003560e01c806363d3e9381161007057806363d3e9381461011a5780637651e178146101385780639ae8886a14610156578063b9c1708014610174578063c495e5f1146101925761009d565b80630dbe671f146100a25780632e52d606146100c0578063426cfd68146100de5780634df7e3d0146100fc575b600080fd5b6100aa6101b0565b6040516100b791906102b0565b60405180910390f35b6100c86101b5565b6040516100d591906102b0565b60405180910390f35b6100e66101d9565b6040516100f391906102b0565b60405180910390f35b6101046101de565b60405161011191906102b0565b60405180910390f35b6101226101e3565b60405161012f91906102b0565b60405180910390f35b610140610207565b60405161014d91906102b0565b60405180910390f35b61015e61022b565b60405161016b91906102b0565b60405180910390f35b61017c61024f565b60405161018991906102b0565b60405180910390f35b61019a610273565b6040516101a791906102b0565b60405180910390f35b600081565b7ffffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd036414181565b600181565b600781565b7f483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b881565b7f30fb036d3d825fe98dfc416fa5333c48c105747deb749532eae09be85ff63dbe81565b7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f81565b7f79be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f8179881565b7febd39f73fc732204e5123f646ec73d2dae67154d1a67a593c65ea8c97dd1c5f481565b6000819050919050565b6102aa81610297565b82525050565b60006020820190506102c560008301846102a1565b9291505056fea2646970667358221220237396f772bda1f4ea6c55ae1419d58ec6adf6959921fb141f7d6016dd08060064736f6c63430008140033";

type ECToolsConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ECToolsConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class ECTools__factory extends ContractFactory {
  constructor(...args: ECToolsConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ECTools> {
    return super.deploy(overrides || {}) as Promise<ECTools>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): ECTools {
    return super.attach(address) as ECTools;
  }
  override connect(signer: Signer): ECTools__factory {
    return super.connect(signer) as ECTools__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ECToolsInterface {
    return new utils.Interface(_abi) as ECToolsInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): ECTools {
    return new Contract(address, _abi, signerOrProvider) as ECTools;
  }
}
