/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../../../common";
import type {
  EllipticCurve,
  EllipticCurveInterface,
} from "../../../../../contracts/cross-chain-zkp/pedersen-commitments/ZKP/EllipticCurve";

const _abi = [
  {
    constant: true,
    inputs: [
      {
        name: "x",
        type: "uint256",
      },
      {
        name: "pp",
        type: "uint256",
      },
    ],
    name: "invMod",
    outputs: [
      {
        name: "q",
        type: "uint256",
      },
    ],
    payable: false,
    stateMutability: "pure",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b506101a6806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c80631b54f82414610030575b600080fd5b6100666004803603604081101561004657600080fd5b81019080803590602001909291908035906020019092919050505061007c565b6040518082815260200191505060405180910390f35b60008083148061008b57508183145b806100965750600082145b15610109576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600e8152602001807f496e76616c6964206e756d62657200000000000000000000000000000000000081525060200191505060405180910390fd5b600090506000600190506000839050600085905060005b600082146101675781838161013157fe5b04905083868061013d57fe5b878061014557fe5b8684098803870880955081965050508182820284038093508194505050610120565b505050509291505056fea265627a7a723058208600c14c65b525811b1ebe1461679aa24a47d14f98bfc842d3c634ac20fec84264736f6c634300050a0032";

type EllipticCurveConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: EllipticCurveConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class EllipticCurve__factory extends ContractFactory {
  constructor(...args: EllipticCurveConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<EllipticCurve> {
    return super.deploy(overrides || {}) as Promise<EllipticCurve>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): EllipticCurve {
    return super.attach(address) as EllipticCurve;
  }
  override connect(signer: Signer): EllipticCurve__factory {
    return super.connect(signer) as EllipticCurve__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): EllipticCurveInterface {
    return new utils.Interface(_abi) as EllipticCurveInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): EllipticCurve {
    return new Contract(address, _abi, signerOrProvider) as EllipticCurve;
  }
}
