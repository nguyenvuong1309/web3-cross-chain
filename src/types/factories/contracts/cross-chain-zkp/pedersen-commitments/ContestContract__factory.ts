/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Signer,
  utils,
  Contract,
  ContractFactory,
  BigNumberish,
  Overrides,
} from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../../common";
import type {
  ContestContract,
  ContestContractInterface,
} from "../../../../contracts/cross-chain-zkp/pedersen-commitments/ContestContract";

const _abi = [
  {
    constant: true,
    inputs: [],
    name: "minter",
    outputs: [
      {
        name: "",
        type: "address",
      },
    ],
    payable: false,
    stateMutability: "view",
    type: "function",
  },
  {
    constant: true,
    inputs: [],
    name: "startDate",
    outputs: [
      {
        name: "",
        type: "uint256",
      },
    ],
    payable: false,
    stateMutability: "view",
    type: "function",
  },
  {
    constant: true,
    inputs: [],
    name: "status",
    outputs: [
      {
        name: "benchmark",
        type: "uint32",
      },
      {
        name: "validated",
        type: "bool",
      },
    ],
    payable: false,
    stateMutability: "view",
    type: "function",
  },
  {
    constant: true,
    inputs: [],
    name: "pedersenAddr",
    outputs: [
      {
        name: "",
        type: "address",
      },
    ],
    payable: false,
    stateMutability: "view",
    type: "function",
  },
  {
    constant: true,
    inputs: [
      {
        name: "",
        type: "address",
      },
    ],
    name: "submissions",
    outputs: [
      {
        name: "firstCommit",
        type: "uint256",
      },
      {
        name: "secondCommit",
        type: "uint256",
      },
      {
        name: "benchmark",
        type: "uint32",
      },
      {
        name: "validated",
        type: "bool",
      },
    ],
    payable: false,
    stateMutability: "view",
    type: "function",
  },
  {
    constant: true,
    inputs: [],
    name: "dataUri",
    outputs: [
      {
        name: "",
        type: "string",
      },
    ],
    payable: false,
    stateMutability: "view",
    type: "function",
  },
  {
    constant: true,
    inputs: [],
    name: "problemUri",
    outputs: [
      {
        name: "",
        type: "string",
      },
    ],
    payable: false,
    stateMutability: "view",
    type: "function",
  },
  {
    constant: true,
    inputs: [],
    name: "endDate",
    outputs: [
      {
        name: "",
        type: "uint256",
      },
    ],
    payable: false,
    stateMutability: "view",
    type: "function",
  },
  {
    constant: false,
    inputs: [
      {
        name: "firstCommit",
        type: "uint256",
      },
      {
        name: "secondCommit",
        type: "uint256",
      },
      {
        name: "benchmark",
        type: "uint32",
      },
    ],
    name: "submit",
    outputs: [],
    payable: false,
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    constant: false,
    inputs: [
      {
        name: "addr",
        type: "address",
      },
      {
        name: "r",
        type: "uint256",
      },
      {
        name: "v",
        type: "uint256",
      },
    ],
    name: "validate",
    outputs: [],
    payable: false,
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        name: "pedAddr",
        type: "address",
      },
      {
        name: "contestStart",
        type: "uint256",
      },
      {
        name: "contestEnd",
        type: "uint256",
      },
      {
        name: "problem",
        type: "string",
      },
      {
        name: "data",
        type: "string",
      },
    ],
    payable: false,
    stateMutability: "nonpayable",
    type: "constructor",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b50604051610be2380380610be2833981810160405260a081101561003357600080fd5b81019080805190602001909291908051906020019092919080519060200190929190805164010000000081111561006957600080fd5b8281019050602081018481111561007f57600080fd5b815185600182028301116401000000008211171561009c57600080fd5b505092919060200180516401000000008111156100b857600080fd5b828101905060208101848111156100ce57600080fd5b81518560018202830111640100000000821117156100eb57600080fd5b5050929190505050336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555084600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550836002819055508260038190555081600490805190602001906101989291906101ba565b5080600590805190602001906101af9291906101ba565b50505050505061025f565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106101fb57805160ff1916838001178555610229565b82800160010185558215610229579182015b8281111561022857825182559160200191906001019061020d565b5b509050610236919061023a565b5090565b61025c91905b80821115610258576000816000905550600101610240565b5090565b90565b6109748061026e6000396000f3fe608060405234801561001057600080fd5b506004361061009e5760003560e01c80638a9b29eb116100665780638a9b29eb1461020757806391a3cc7a1461028a578063c24a0f8b1461030d578063cdf7d8931461032b578063d71fbd7f146103735761009e565b806307546172146100a35780630b97bc86146100ed578063200d2ed21461010b5780633e1413191461014057806389e14e161461018a575b600080fd5b6100ab6103cb565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b6100f56103f0565b6040518082815260200191505060405180910390f35b6101136103f6565b604051808363ffffffff1663ffffffff168152602001821515151581526020019250505060405180910390f35b6101486104b9565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b6101cc600480360360208110156101a057600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506104df565b604051808581526020018481526020018363ffffffff1663ffffffff1681526020018215151515815260200194505050505060405180910390f35b61020f61052c565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561024f578082015181840152602081019050610234565b50505050905090810190601f16801561027c5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6102926105ca565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156102d25780820151818401526020810190506102b7565b50505050905090810190601f1680156102ff5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b610315610668565b6040518082815260200191505060405180910390f35b6103716004803603606081101561034157600080fd5b810190808035906020019092919080359060200190929190803563ffffffff16906020019092919050505061066e565b005b6103c96004803603606081101561038957600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919080359060200190929190505050610761565b005b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60025481565b60008061040161090f565b600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060405180608001604052908160008201548152602001600182015481526020016002820160009054906101000a900463ffffffff1663ffffffff1663ffffffff1681526020016002820160049054906101000a900460ff1615151515815250509050806040015181606001518093508194505050509091565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60066020528060005260406000206000915090508060000154908060010154908060020160009054906101000a900463ffffffff16908060020160049054906101000a900460ff16905084565b60058054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156105c25780601f10610597576101008083540402835291602001916105c2565b820191906000526020600020905b8154815290600101906020018083116105a557829003601f168201915b505050505081565b60048054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156106605780601f1061063557610100808354040283529160200191610660565b820191906000526020600020905b81548152906001019060200180831161064357829003601f168201915b505050505081565b60035481565b60025443108061067f575060035443115b1561068957600080fd5b61069161090f565b60405180608001604052808581526020018481526020018363ffffffff16815260200160001515815250905080600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082015181600001556020820151816001015560408201518160020160006101000a81548163ffffffff021916908363ffffffff16021790555060608201518160020160046101000a81548160ff02191690831515021790555090505050505050565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508073ffffffffffffffffffffffffffffffffffffffff1663dafbb2258484600660008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000154600660008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600101546040518563ffffffff1660e01b81526004018085815260200184815260200183815260200182815260200194505050505060206040518083038186803b15801561087557600080fd5b505afa158015610889573d6000803e3d6000fd5b505050506040513d602081101561089f57600080fd5b8101908080519060200190929190505050600660008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020160046101000a81548160ff02191690831515021790555050505050565b60405180608001604052806000815260200160008152602001600063ffffffff168152602001600015158152509056fea265627a7a72305820051890b089115e3d4e15b181d6253b213506e6be70f33e7422dd575fe3f024ff64736f6c634300050a0032";

type ContestContractConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ContestContractConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class ContestContract__factory extends ContractFactory {
  constructor(...args: ContestContractConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    pedAddr: PromiseOrValue<string>,
    contestStart: PromiseOrValue<BigNumberish>,
    contestEnd: PromiseOrValue<BigNumberish>,
    problem: PromiseOrValue<string>,
    data: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContestContract> {
    return super.deploy(
      pedAddr,
      contestStart,
      contestEnd,
      problem,
      data,
      overrides || {}
    ) as Promise<ContestContract>;
  }
  override getDeployTransaction(
    pedAddr: PromiseOrValue<string>,
    contestStart: PromiseOrValue<BigNumberish>,
    contestEnd: PromiseOrValue<BigNumberish>,
    problem: PromiseOrValue<string>,
    data: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(
      pedAddr,
      contestStart,
      contestEnd,
      problem,
      data,
      overrides || {}
    );
  }
  override attach(address: string): ContestContract {
    return super.attach(address) as ContestContract;
  }
  override connect(signer: Signer): ContestContract__factory {
    return super.connect(signer) as ContestContract__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ContestContractInterface {
    return new utils.Interface(_abi) as ContestContractInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): ContestContract {
    return new Contract(address, _abi, signerOrProvider) as ContestContract;
  }
}
