/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Signer,
  utils,
  Contract,
  ContractFactory,
  BigNumberish,
  Overrides,
} from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../../common";
import type {
  VickreyAuction,
  VickreyAuctionInterface,
} from "../../../../contracts/cross-chain-zkp/VickreyAuction.sol/VickreyAuction";

const _abi = [
  {
    constant: true,
    inputs: [],
    name: "_secondHighestBidValue",
    outputs: [
      {
        name: "",
        type: "uint256",
      },
    ],
    payable: false,
    stateMutability: "view",
    type: "function",
  },
  {
    constant: false,
    inputs: [],
    name: "finalize",
    outputs: [],
    payable: false,
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    constant: true,
    inputs: [],
    name: "_highestBidValue",
    outputs: [
      {
        name: "",
        type: "uint256",
      },
    ],
    payable: false,
    stateMutability: "view",
    type: "function",
  },
  {
    constant: false,
    inputs: [
      {
        name: "time",
        type: "uint256",
      },
    ],
    name: "overrideTime",
    outputs: [],
    payable: false,
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    constant: true,
    inputs: [
      {
        name: "",
        type: "address",
      },
    ],
    name: "bids",
    outputs: [
      {
        name: "",
        type: "bytes32",
      },
    ],
    payable: false,
    stateMutability: "view",
    type: "function",
  },
  {
    constant: false,
    inputs: [
      {
        name: "bidCommitment",
        type: "bytes32",
      },
    ],
    name: "commitBid",
    outputs: [
      {
        name: "",
        type: "bool",
      },
    ],
    payable: true,
    stateMutability: "payable",
    type: "function",
  },
  {
    constant: true,
    inputs: [
      {
        name: "nonce",
        type: "bytes32",
      },
      {
        name: "bidValue",
        type: "uint256",
      },
    ],
    name: "makeCommitment",
    outputs: [
      {
        name: "",
        type: "bytes32",
      },
    ],
    payable: false,
    stateMutability: "view",
    type: "function",
  },
  {
    constant: false,
    inputs: [
      {
        name: "nonce",
        type: "bytes32",
      },
    ],
    name: "revealBid",
    outputs: [
      {
        name: "highestBidder",
        type: "address",
      },
    ],
    payable: true,
    stateMutability: "payable",
    type: "function",
  },
  {
    constant: true,
    inputs: [],
    name: "_testTime",
    outputs: [
      {
        name: "",
        type: "uint256",
      },
    ],
    payable: false,
    stateMutability: "view",
    type: "function",
  },
  {
    constant: true,
    inputs: [],
    name: "_highestBidder",
    outputs: [
      {
        name: "",
        type: "address",
      },
    ],
    payable: false,
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        name: "reservePrice",
        type: "uint256",
      },
      {
        name: "commitTimePeriod",
        type: "uint256",
      },
      {
        name: "revealTimePeriod",
        type: "uint256",
      },
      {
        name: "bidDepositAmount",
        type: "uint256",
      },
      {
        name: "testMode",
        type: "bool",
      },
    ],
    payable: false,
    stateMutability: "nonpayable",
    type: "constructor",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b5060405160a0806105ea833981018060405281019080805190602001909291908051906020019092919080519060200190929190805190602001909291908051906020019092919050505080600860146101000a81548160ff02191690831515021790555033600a60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506100cd61015b640100000000026401000000009004565b6006819055508360065401600281905550828460065401016007819055508160018190555084600381905550846004819055508460058190555060006003819055506000600860006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050505050610183565b6000600860149054906101000a900460ff161561017c576009549050610180565b4390505b90565b610458806101926000396000f3006080604052600436106100a4576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680633d66da21146100a95780634bb278f3146100d45780635ab9cacf146100eb5780635fe222a21461011657806362ea82db1461014357806386a2cc27146101a2578063ab4adc50146101de578063acc9138e14610235578063ae2c7a2b14610299578063e3364bf6146102c4575b600080fd5b3480156100b557600080fd5b506100be61031b565b6040518082815260200191505060405180910390f35b3480156100e057600080fd5b506100e9610321565b005b3480156100f757600080fd5b50610100610323565b6040518082815260200191505060405180910390f35b34801561012257600080fd5b5061014160048036038101908080359060200190929190505050610329565b005b34801561014f57600080fd5b50610184600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506103aa565b60405180826000191660001916815260200191505060405180910390f35b6101c460048036038101908080356000191690602001909291905050506103c2565b604051808215151515815260200191505060405180910390f35b3480156101ea57600080fd5b506102176004803603810190808035600019169060200190929190803590602001909291905050506103c9565b60405180826000191660001916815260200191505060405180910390f35b61025760048036038101908080356000191690602001909291905050506103f9565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156102a557600080fd5b506102ae610400565b6040518082815260200191505060405180910390f35b3480156102d057600080fd5b506102d9610406565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b60045481565b565b60035481565b600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561038557600080fd5b600860149054906101000a900460ff1615156103a057600080fd5b8060098190555050565b60006020528060005260406000206000915090505481565b6000919050565b60008282604051808360001916600019168152602001828152602001925050506040518091039020905092915050565b6000919050565b60095481565b600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16815600a165627a7a7230582063c43d1c39934c3de044fbe985cfe8b57fc9e230d0660ba14caf0d96bfce4c3b0029";

type VickreyAuctionConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: VickreyAuctionConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class VickreyAuction__factory extends ContractFactory {
  constructor(...args: VickreyAuctionConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    reservePrice: PromiseOrValue<BigNumberish>,
    commitTimePeriod: PromiseOrValue<BigNumberish>,
    revealTimePeriod: PromiseOrValue<BigNumberish>,
    bidDepositAmount: PromiseOrValue<BigNumberish>,
    testMode: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<VickreyAuction> {
    return super.deploy(
      reservePrice,
      commitTimePeriod,
      revealTimePeriod,
      bidDepositAmount,
      testMode,
      overrides || {}
    ) as Promise<VickreyAuction>;
  }
  override getDeployTransaction(
    reservePrice: PromiseOrValue<BigNumberish>,
    commitTimePeriod: PromiseOrValue<BigNumberish>,
    revealTimePeriod: PromiseOrValue<BigNumberish>,
    bidDepositAmount: PromiseOrValue<BigNumberish>,
    testMode: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(
      reservePrice,
      commitTimePeriod,
      revealTimePeriod,
      bidDepositAmount,
      testMode,
      overrides || {}
    );
  }
  override attach(address: string): VickreyAuction {
    return super.attach(address) as VickreyAuction;
  }
  override connect(signer: Signer): VickreyAuction__factory {
    return super.connect(signer) as VickreyAuction__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): VickreyAuctionInterface {
    return new utils.Interface(_abi) as VickreyAuctionInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): VickreyAuction {
    return new Contract(address, _abi, signerOrProvider) as VickreyAuction;
  }
}
