/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  BridgeB,
  BridgeBInterface,
} from "../../../contracts/cross-chain-zkp/BridgeB";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "gateway_",
        type: "address",
      },
      {
        internalType: "address",
        name: "gasService_",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "InvalidAddress",
    type: "error",
  },
  {
    inputs: [],
    name: "NotApprovedByGateway",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "string",
        name: "sourceChain",
        type: "string",
      },
      {
        indexed: false,
        internalType: "string",
        name: "sourceAddress",
        type: "string",
      },
      {
        indexed: false,
        internalType: "string",
        name: "message",
        type: "string",
      },
    ],
    name: "MessageReceived",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "commandId",
        type: "bytes32",
      },
      {
        internalType: "string",
        name: "sourceChain",
        type: "string",
      },
      {
        internalType: "string",
        name: "sourceAddress",
        type: "string",
      },
      {
        internalType: "bytes",
        name: "payload",
        type: "bytes",
      },
    ],
    name: "execute",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "commandId",
        type: "bytes32",
      },
      {
        internalType: "string",
        name: "sourceChain",
        type: "string",
      },
      {
        internalType: "string",
        name: "sourceAddress",
        type: "string",
      },
      {
        internalType: "bytes",
        name: "payload",
        type: "bytes",
      },
      {
        internalType: "string",
        name: "tokenSymbol",
        type: "string",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "executeWithToken",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "gasService",
    outputs: [
      {
        internalType: "contract IAxelarGasService",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "gateway",
    outputs: [
      {
        internalType: "contract IAxelarGateway",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "message",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "destinationChain",
        type: "string",
      },
      {
        internalType: "string",
        name: "destinationAddress",
        type: "string",
      },
      {
        internalType: "string",
        name: "message_",
        type: "string",
      },
    ],
    name: "sendData",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60c06040523480156200001157600080fd5b50604051620014f0380380620014f083398181016040528101906200003791906200017b565b81600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415620000a0576040517fe6c4247b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1681525050508073ffffffffffffffffffffffffffffffffffffffff1660a08173ffffffffffffffffffffffffffffffffffffffff16815250505050620001c2565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620001438262000116565b9050919050565b620001558162000136565b81146200016157600080fd5b50565b60008151905062000175816200014a565b92915050565b6000806040838503121562000195576200019462000111565b5b6000620001a58582860162000164565b9250506020620001b88582860162000164565b9150509250929050565b60805160a0516112ec62000204600039600081816102c0015261051301526000818161014b0152818161018b01528181610358015261041001526112ec6000f3fe6080604052600436106100555760003560e01c8063116191b61461005a5780631a98b2e01461008557806339851d5f146100ae57806349160658146100ca5780636a22d8cc146100f3578063e21f37ce1461011e575b600080fd5b34801561006657600080fd5b5061006f610149565b60405161007c91906107fb565b60405180910390f35b34801561009157600080fd5b506100ac60048036038101906100a79190610951565b61016d565b005b6100c860048036038101906100c39190610a61565b610298565b005b3480156100d657600080fd5b506100f160048036038101906100ec9190610b15565b6103f2565b005b3480156100ff57600080fd5b50610108610511565b6040516101159190610bff565b60405180910390f35b34801561012a57600080fd5b50610133610535565b6040516101409190610cb3565b60405180910390f35b7f000000000000000000000000000000000000000000000000000000000000000081565b6000858560405161017f929190610d14565b604051809103902090507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16631876eed98c8c8c8c8c878b8b8b6040518a63ffffffff1660e01b81526004016101f299989796959493929190610d78565b602060405180830381600087803b15801561020c57600080fd5b505af1158015610220573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102449190610e2c565b61027a576040517f500c44b400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61028b8a8a8a8a8a8a8a8a8a6105c3565b5050505050505050505050565b600082826040516020016102ad929190610e59565b60405160208183030381529060405290507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16630c93e3bb34308a8a8a8a88336040518963ffffffff1660e01b81526004016103249796959493929190610ef3565b6000604051808303818588803b15801561033d57600080fd5b505af1158015610351573d6000803e3d6000fd5b50505050507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16631c92115f88888888866040518663ffffffff1660e01b81526004016103b7959493929190610f5f565b600060405180830381600087803b1580156103d157600080fd5b505af11580156103e5573d6000803e3d6000fd5b5050505050505050505050565b60008282604051610404929190610d14565b604051809103902090507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16635f6970c38989898989876040518763ffffffff1660e01b815260040161047196959493929190610faf565b602060405180830381600087803b15801561048b57600080fd5b505af115801561049f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104c39190610e2c565b6104f9576040517f500c44b400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6105078787878787876105ce565b5050505050505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b6000805461054290611035565b80601f016020809104026020016040519081016040528092919081815260200182805461056e90611035565b80156105bb5780601f10610590576101008083540402835291602001916105bb565b820191906000526020600020905b81548152906001019060200180831161059e57829003601f168201915b505050505081565b505050505050505050565b81818101906105dd9190611188565b600090805190602001906105f29291906106d9565b507f4bb91efa6f101cb39247944090c1327252e3046492283c9246a07b9d01451f4e86868686600060405161062b959493929190611266565b60405180910390a16106ca868686866000805461064790611035565b80601f016020809104026020016040519081016040528092919081815260200182805461067390611035565b80156106c05780601f10610695576101008083540402835291602001916106c0565b820191906000526020600020905b8154815290600101906020018083116106a357829003601f168201915b50505050506106d2565b505050505050565b5050505050565b8280546106e590611035565b90600052602060002090601f016020900481019282610707576000855561074e565b82601f1061072057805160ff191683800117855561074e565b8280016001018555821561074e579182015b8281111561074d578251825591602001919060010190610732565b5b50905061075b919061075f565b5090565b5b80821115610778576000816000905550600101610760565b5090565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b60006107c16107bc6107b78461077c565b61079c565b61077c565b9050919050565b60006107d3826107a6565b9050919050565b60006107e5826107c8565b9050919050565b6107f5816107da565b82525050565b600060208201905061081060008301846107ec565b92915050565b6000604051905090565b600080fd5b600080fd5b6000819050919050565b61083d8161082a565b811461084857600080fd5b50565b60008135905061085a81610834565b92915050565b600080fd5b600080fd5b600080fd5b60008083601f84011261088557610884610860565b5b8235905067ffffffffffffffff8111156108a2576108a1610865565b5b6020830191508360018202830111156108be576108bd61086a565b5b9250929050565b60008083601f8401126108db576108da610860565b5b8235905067ffffffffffffffff8111156108f8576108f7610865565b5b6020830191508360018202830111156109145761091361086a565b5b9250929050565b6000819050919050565b61092e8161091b565b811461093957600080fd5b50565b60008135905061094b81610925565b92915050565b60008060008060008060008060008060c08b8d03121561097457610973610820565b5b60006109828d828e0161084b565b9a505060208b013567ffffffffffffffff8111156109a3576109a2610825565b5b6109af8d828e0161086f565b995099505060408b013567ffffffffffffffff8111156109d2576109d1610825565b5b6109de8d828e0161086f565b975097505060608b013567ffffffffffffffff811115610a0157610a00610825565b5b610a0d8d828e016108c5565b955095505060808b013567ffffffffffffffff811115610a3057610a2f610825565b5b610a3c8d828e0161086f565b935093505060a0610a4f8d828e0161093c565b9150509295989b9194979a5092959850565b60008060008060008060608789031215610a7e57610a7d610820565b5b600087013567ffffffffffffffff811115610a9c57610a9b610825565b5b610aa889828a0161086f565b9650965050602087013567ffffffffffffffff811115610acb57610aca610825565b5b610ad789828a0161086f565b9450945050604087013567ffffffffffffffff811115610afa57610af9610825565b5b610b0689828a0161086f565b92509250509295509295509295565b60008060008060008060006080888a031215610b3457610b33610820565b5b6000610b428a828b0161084b565b975050602088013567ffffffffffffffff811115610b6357610b62610825565b5b610b6f8a828b0161086f565b9650965050604088013567ffffffffffffffff811115610b9257610b91610825565b5b610b9e8a828b0161086f565b9450945050606088013567ffffffffffffffff811115610bc157610bc0610825565b5b610bcd8a828b016108c5565b925092505092959891949750929550565b6000610be9826107c8565b9050919050565b610bf981610bde565b82525050565b6000602082019050610c146000830184610bf0565b92915050565b600081519050919050565b600082825260208201905092915050565b60005b83811015610c54578082015181840152602081019050610c39565b83811115610c63576000848401525b50505050565b6000601f19601f8301169050919050565b6000610c8582610c1a565b610c8f8185610c25565b9350610c9f818560208601610c36565b610ca881610c69565b840191505092915050565b60006020820190508181036000830152610ccd8184610c7a565b905092915050565b600081905092915050565b82818337600083830152505050565b6000610cfb8385610cd5565b9350610d08838584610ce0565b82840190509392505050565b6000610d21828486610cef565b91508190509392505050565b610d368161082a565b82525050565b6000610d488385610c25565b9350610d55838584610ce0565b610d5e83610c69565b840190509392505050565b610d728161091b565b82525050565b600060c082019050610d8d600083018c610d2d565b8181036020830152610da0818a8c610d3c565b90508181036040830152610db581888a610d3c565b9050610dc46060830187610d2d565b8181036080830152610dd7818587610d3c565b9050610de660a0830184610d69565b9a9950505050505050505050565b60008115159050919050565b610e0981610df4565b8114610e1457600080fd5b50565b600081519050610e2681610e00565b92915050565b600060208284031215610e4257610e41610820565b5b6000610e5084828501610e17565b91505092915050565b60006020820190508181036000830152610e74818486610d3c565b90509392505050565b6000610e888261077c565b9050919050565b610e9881610e7d565b82525050565b600081519050919050565b600082825260208201905092915050565b6000610ec582610e9e565b610ecf8185610ea9565b9350610edf818560208601610c36565b610ee881610c69565b840191505092915050565b600060a082019050610f08600083018a610e8f565b8181036020830152610f1b81888a610d3c565b90508181036040830152610f30818688610d3c565b90508181036060830152610f448185610eba565b9050610f536080830184610e8f565b98975050505050505050565b60006060820190508181036000830152610f7a818789610d3c565b90508181036020830152610f8f818587610d3c565b90508181036040830152610fa38184610eba565b90509695505050505050565b6000608082019050610fc46000830189610d2d565b8181036020830152610fd7818789610d3c565b90508181036040830152610fec818587610d3c565b9050610ffb6060830184610d2d565b979650505050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061104d57607f821691505b6020821081141561106157611060611006565b5b50919050565b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6110a482610c69565b810181811067ffffffffffffffff821117156110c3576110c261106c565b5b80604052505050565b60006110d6610816565b90506110e2828261109b565b919050565b600067ffffffffffffffff8211156111025761110161106c565b5b61110b82610c69565b9050602081019050919050565b600061112b611126846110e7565b6110cc565b90508281526020810184848401111561114757611146611067565b5b611152848285610ce0565b509392505050565b600082601f83011261116f5761116e610860565b5b813561117f848260208601611118565b91505092915050565b60006020828403121561119e5761119d610820565b5b600082013567ffffffffffffffff8111156111bc576111bb610825565b5b6111c88482850161115a565b91505092915050565b60008190508160005260206000209050919050565b600081546111f381611035565b6111fd8186610c25565b94506001821660008114611218576001811461122a5761125d565b60ff198316865260208601935061125d565b611233856111d1565b60005b8381101561125557815481890152600182019150602081019050611236565b808801955050505b50505092915050565b60006060820190508181036000830152611281818789610d3c565b90508181036020830152611296818587610d3c565b905081810360408301526112aa81846111e6565b9050969550505050505056fea26469706673582212205c2403e8fee7bef2e21fe40d8166972a7e2c330819d8292a171cc6386d910ca864736f6c63430008090033";

type BridgeBConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: BridgeBConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class BridgeB__factory extends ContractFactory {
  constructor(...args: BridgeBConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    gateway_: PromiseOrValue<string>,
    gasService_: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<BridgeB> {
    return super.deploy(
      gateway_,
      gasService_,
      overrides || {}
    ) as Promise<BridgeB>;
  }
  override getDeployTransaction(
    gateway_: PromiseOrValue<string>,
    gasService_: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(gateway_, gasService_, overrides || {});
  }
  override attach(address: string): BridgeB {
    return super.attach(address) as BridgeB;
  }
  override connect(signer: Signer): BridgeB__factory {
    return super.connect(signer) as BridgeB__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): BridgeBInterface {
    return new utils.Interface(_abi) as BridgeBInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): BridgeB {
    return new Contract(address, _abi, signerOrProvider) as BridgeB;
  }
}
