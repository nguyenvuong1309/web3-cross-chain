/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../../common";
import type {
  CallContractWithToken,
  CallContractWithTokenInterface,
} from "../../../../contracts/call-contract-with-token/contracts/CallContractWithToken";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_gateway",
        type: "address",
      },
      {
        internalType: "address",
        name: "_gasReceiver",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "InvalidAddress",
    type: "error",
  },
  {
    inputs: [],
    name: "NotApprovedByGateway",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [],
    name: "Executed",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "commandId",
        type: "bytes32",
      },
      {
        internalType: "string",
        name: "sourceChain",
        type: "string",
      },
      {
        internalType: "string",
        name: "sourceAddress",
        type: "string",
      },
      {
        internalType: "bytes",
        name: "payload",
        type: "bytes",
      },
    ],
    name: "execute",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "commandId",
        type: "bytes32",
      },
      {
        internalType: "string",
        name: "sourceChain",
        type: "string",
      },
      {
        internalType: "string",
        name: "sourceAddress",
        type: "string",
      },
      {
        internalType: "bytes",
        name: "payload",
        type: "bytes",
      },
      {
        internalType: "string",
        name: "tokenSymbol",
        type: "string",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "executeWithToken",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "gasService",
    outputs: [
      {
        internalType: "contract IAxelarGasService",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "gateway",
    outputs: [
      {
        internalType: "contract IAxelarGateway",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "destinationChain",
        type: "string",
      },
      {
        internalType: "string",
        name: "destinationAddress",
        type: "string",
      },
      {
        internalType: "address[]",
        name: "destinationAddresses",
        type: "address[]",
      },
      {
        internalType: "string",
        name: "symbol",
        type: "string",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "sendToMany",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60c060405234801561001057600080fd5b506040516111b63803806111b683398101604081905261002f9161008b565b816001600160a01b0381166100575760405163e6c4247b60e01b815260040160405180910390fd5b6001600160a01b039081166080521660a052506100be565b80516001600160a01b038116811461008657600080fd5b919050565b6000806040838503121561009e57600080fd5b6100a78361006f565b91506100b56020840161006f565b90509250929050565b60805160a0516110a36101136000396000818161010301526106300152600081816071015281816101820152818161029e015281816103f70152818161054f015281816106d2015261076201526110a36000f3fe60806040526004361061005a5760003560e01c8063491606581161004357806349160658146100d15780636a22d8cc146100f1578063fbd9497b1461012557600080fd5b8063116191b61461005f5780631a98b2e0146100af575b600080fd5b34801561006b57600080fd5b506100937f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b03909116815260200160405180910390f35b3480156100bb57600080fd5b506100cf6100ca36600461095e565b610138565b005b3480156100dd57600080fd5b506100cf6100ec366004610a38565b610254565b3480156100fd57600080fd5b506100937f000000000000000000000000000000000000000000000000000000000000000081565b6100cf610133366004610b93565b610356565b6000858560405161014a929190610c7f565b6040519081900381207f1876eed900000000000000000000000000000000000000000000000000000000825291506001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690631876eed9906101c7908e908e908e908e908e9089908d908d908d90600401610cb8565b602060405180830381600087803b1580156101e157600080fd5b505af11580156101f5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102199190610d17565b61023657604051631403112d60e21b815260040160405180910390fd5b6102478a8a8a8a8a8a8a8a8a61074e565b5050505050505050505050565b60008282604051610266929190610c7f565b6040519081900381207f5f6970c300000000000000000000000000000000000000000000000000000000825291506001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690635f6970c3906102dd908b908b908b908b908b908990600401610d40565b602060405180830381600087803b1580156102f757600080fd5b505af115801561030b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061032f9190610d17565b61034c57604051631403112d60e21b815260040160405180910390fd5b5050505050505050565b600034116103c4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f476173207061796d656e74206973207265717569726564000000000000000000604482015260640160405180910390fd5b6040517f935b13f60000000000000000000000000000000000000000000000000000000081526000906001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063935b13f69061042c908690600401610dce565b60206040518083038186803b15801561044457600080fd5b505afa158015610458573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061047c9190610df9565b6040517f23b872dd000000000000000000000000000000000000000000000000000000008152336004820152306024820152604481018490529091506001600160a01b038216906323b872dd90606401602060405180830381600087803b1580156104e657600080fd5b505af11580156104fa573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061051e9190610d17565b506040517f095ea7b30000000000000000000000000000000000000000000000000000000081526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811660048301526024820184905282169063095ea7b390604401602060405180830381600087803b1580156105a257600080fd5b505af11580156105b6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105da9190610d17565b50600085856040516020016105f0929190610e16565b60408051601f19818403018152908290527fc62c200200000000000000000000000000000000000000000000000000000000825291506001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063c62c20029034906106739030908d908d9088908c908c903390600401610e64565b6000604051808303818588803b15801561068c57600080fd5b505af11580156106a0573d6000803e3d6000fd5b50506040517fb54170840000000000000000000000000000000000000000000000000000000081526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016935063b5417084925061071291508b908b9086908a908a90600401610ede565b600060405180830381600087803b15801561072c57600080fd5b505af1158015610740573d6000803e3d6000fd5b505050505050505050505050565b600061075c85870187610f3e565b905060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663935b13f686866040518363ffffffff1660e01b81526004016107ae929190610ff0565b60206040518083038186803b1580156107c657600080fd5b505afa1580156107da573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107fe9190610df9565b9050600082518461080f919061100c565b905060005b83518110156108dd57826001600160a01b031663a9059cbb85838151811061083e5761083e61102e565b6020026020010151846040518363ffffffff1660e01b81526004016108789291906001600160a01b03929092168252602082015260400190565b602060405180830381600087803b15801561089257600080fd5b505af11580156108a6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108ca9190610d17565b50806108d581611044565b915050610814565b506040517f68f46c45a243a0e9065a97649faf9a5afe1692f2679e650c2f853b9cd734cc0e90600090a1505050505050505050505050565b60008083601f84011261092757600080fd5b50813567ffffffffffffffff81111561093f57600080fd5b60208301915083602082850101111561095757600080fd5b9250929050565b60008060008060008060008060008060c08b8d03121561097d57600080fd5b8a35995060208b013567ffffffffffffffff8082111561099c57600080fd5b6109a88e838f01610915565b909b50995060408d01359150808211156109c157600080fd5b6109cd8e838f01610915565b909950975060608d01359150808211156109e657600080fd5b6109f28e838f01610915565b909750955060808d0135915080821115610a0b57600080fd5b50610a188d828e01610915565b9150809450508092505060a08b013590509295989b9194979a5092959850565b60008060008060008060006080888a031215610a5357600080fd5b87359650602088013567ffffffffffffffff80821115610a7257600080fd5b610a7e8b838c01610915565b909850965060408a0135915080821115610a9757600080fd5b610aa38b838c01610915565b909650945060608a0135915080821115610abc57600080fd5b50610ac98a828b01610915565b989b979a50959850939692959293505050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff81118282101715610b1b57610b1b610adc565b604052919050565b600082601f830112610b3457600080fd5b813567ffffffffffffffff811115610b4e57610b4e610adc565b610b61601f8201601f1916602001610af2565b818152846020838601011115610b7657600080fd5b816020850160208301376000918101602001919091529392505050565b60008060008060008060a08789031215610bac57600080fd5b863567ffffffffffffffff80821115610bc457600080fd5b610bd08a838b01610b23565b97506020890135915080821115610be657600080fd5b610bf28a838b01610b23565b96506040890135915080821115610c0857600080fd5b818901915089601f830112610c1c57600080fd5b813581811115610c2b57600080fd5b8a60208260051b8501011115610c4057600080fd5b602083019650809550506060890135915080821115610c5e57600080fd5b50610c6b89828a01610b23565b925050608087013590509295509295509295565b8183823760009101908152919050565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b89815260c060208201526000610cd260c083018a8c610c8f565b8281036040840152610ce581898b610c8f565b90508660608401528281036080840152610d00818688610c8f565b9150508260a08301529a9950505050505050505050565b600060208284031215610d2957600080fd5b81518015158114610d3957600080fd5b9392505050565b868152608060208201526000610d5a608083018789610c8f565b8281036040840152610d6d818688610c8f565b915050826060830152979650505050505050565b6000815180845260005b81811015610da757602081850181015186830182015201610d8b565b81811115610db9576000602083870101525b50601f01601f19169290920160200192915050565b602081526000610d396020830184610d81565b6001600160a01b0381168114610df657600080fd5b50565b600060208284031215610e0b57600080fd5b8151610d3981610de1565b60208082528181018390526000908460408401835b86811015610e59578235610e3e81610de1565b6001600160a01b031682529183019190830190600101610e2b565b509695505050505050565b60006001600160a01b03808a16835260e06020840152610e8760e084018a610d81565b8381036040850152610e99818a610d81565b90508381036060850152610ead8189610d81565b90508381036080850152610ec18188610d81565b60a0850196909652509290921660c0909101525095945050505050565b60a081526000610ef160a0830188610d81565b8281036020840152610f038188610d81565b90508281036040840152610f178187610d81565b90508281036060840152610f2b8186610d81565b9150508260808301529695505050505050565b60006020808385031215610f5157600080fd5b823567ffffffffffffffff80821115610f6957600080fd5b818501915085601f830112610f7d57600080fd5b813581811115610f8f57610f8f610adc565b8060051b9150610fa0848301610af2565b8181529183018401918481019088841115610fba57600080fd5b938501935b83851015610fe45784359250610fd483610de1565b8282529385019390850190610fbf565b98975050505050505050565b602081526000611004602083018486610c8f565b949350505050565b60008261102957634e487b7160e01b600052601260045260246000fd5b500490565b634e487b7160e01b600052603260045260246000fd5b600060001982141561106657634e487b7160e01b600052601160045260246000fd5b506001019056fea264697066735822122079f19b9c3d18a70ceabc7c9525e14a4e300be563dbea97d3abb0f197f600293d64736f6c63430008090033";

type CallContractWithTokenConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: CallContractWithTokenConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class CallContractWithToken__factory extends ContractFactory {
  constructor(...args: CallContractWithTokenConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _gateway: PromiseOrValue<string>,
    _gasReceiver: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<CallContractWithToken> {
    return super.deploy(
      _gateway,
      _gasReceiver,
      overrides || {}
    ) as Promise<CallContractWithToken>;
  }
  override getDeployTransaction(
    _gateway: PromiseOrValue<string>,
    _gasReceiver: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_gateway, _gasReceiver, overrides || {});
  }
  override attach(address: string): CallContractWithToken {
    return super.attach(address) as CallContractWithToken;
  }
  override connect(signer: Signer): CallContractWithToken__factory {
    return super.connect(signer) as CallContractWithToken__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): CallContractWithTokenInterface {
    return new utils.Interface(_abi) as CallContractWithTokenInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): CallContractWithToken {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as CallContractWithToken;
  }
}
