/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../../common";
import type {
  TokenBridge,
  TokenBridgeInterface,
} from "../../../../contracts/zkp-samechain/TokenBridge.sol/TokenBridge";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_tokenB",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "sender",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "recipient",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "BridgeExecuted",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "recipient",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "receiveData",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_tokenB",
        type: "address",
      },
    ],
    name: "setTokenB",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "tokenB",
    outputs: [
      {
        internalType: "contract TokenB",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b50604051610a6e380380610a6e83398181016040528101906100329190610234565b61004e61004361010560201b60201c565b61010d60201b60201c565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156100be576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016100b5906102be565b60405180910390fd5b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550506102de565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610201826101d6565b9050919050565b610211816101f6565b811461021c57600080fd5b50565b60008151905061022e81610208565b92915050565b60006020828403121561024a576102496101d1565b5b60006102588482850161021f565b91505092915050565b600082825260208201905092915050565b7f496e76616c696420546f6b656e42206164647265737300000000000000000000600082015250565b60006102a8601683610261565b91506102b382610272565b602082019050919050565b600060208201905081810360008301526102d78161029b565b9050919050565b610781806102ed6000396000f3fe6080604052600436106100555760003560e01c8063147075381461005a5780635f64b55b14610083578063715018a6146100ae5780638da5cb5b146100c5578063ca767d52146100f0578063f2fde38b1461010c575b600080fd5b34801561006657600080fd5b50610081600480360381019061007c9190610489565b610135565b005b34801561008f57600080fd5b506100986101f1565b6040516100a59190610515565b60405180910390f35b3480156100ba57600080fd5b506100c3610217565b005b3480156100d157600080fd5b506100da61022b565b6040516100e7919061053f565b60405180910390f35b61010a60048036038101906101059190610590565b610254565b005b34801561011857600080fd5b50610133600480360381019061012e9190610489565b610258565b005b61013d6102dc565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156101ad576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101a49061062d565b60405180910390fd5b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b61021f6102dc565b610229600061035a565b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b5050565b6102606102dc565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156102d0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102c7906106bf565b60405180910390fd5b6102d98161035a565b50565b6102e461041e565b73ffffffffffffffffffffffffffffffffffffffff1661030261022b565b73ffffffffffffffffffffffffffffffffffffffff1614610358576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161034f9061072b565b60405180910390fd5b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600033905090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006104568261042b565b9050919050565b6104668161044b565b811461047157600080fd5b50565b6000813590506104838161045d565b92915050565b60006020828403121561049f5761049e610426565b5b60006104ad84828501610474565b91505092915050565b6000819050919050565b60006104db6104d66104d18461042b565b6104b6565b61042b565b9050919050565b60006104ed826104c0565b9050919050565b60006104ff826104e2565b9050919050565b61050f816104f4565b82525050565b600060208201905061052a6000830184610506565b92915050565b6105398161044b565b82525050565b60006020820190506105546000830184610530565b92915050565b6000819050919050565b61056d8161055a565b811461057857600080fd5b50565b60008135905061058a81610564565b92915050565b600080604083850312156105a7576105a6610426565b5b60006105b585828601610474565b92505060206105c68582860161057b565b9150509250929050565b600082825260208201905092915050565b7f496e76616c696420546f6b656e42206164647265737300000000000000000000600082015250565b60006106176016836105d0565b9150610622826105e1565b602082019050919050565b600060208201905081810360008301526106468161060a565b9050919050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b60006106a96026836105d0565b91506106b48261064d565b604082019050919050565b600060208201905081810360008301526106d88161069c565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b60006107156020836105d0565b9150610720826106df565b602082019050919050565b6000602082019050818103600083015261074481610708565b905091905056fea26469706673582212209ea822132ce6809838a4832bd339a4daf1f7c5f0e0ef846ce95ff5418ad8c84c64736f6c63430008090033";

type TokenBridgeConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: TokenBridgeConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class TokenBridge__factory extends ContractFactory {
  constructor(...args: TokenBridgeConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _tokenB: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<TokenBridge> {
    return super.deploy(_tokenB, overrides || {}) as Promise<TokenBridge>;
  }
  override getDeployTransaction(
    _tokenB: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_tokenB, overrides || {});
  }
  override attach(address: string): TokenBridge {
    return super.attach(address) as TokenBridge;
  }
  override connect(signer: Signer): TokenBridge__factory {
    return super.connect(signer) as TokenBridge__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TokenBridgeInterface {
    return new utils.Interface(_abi) as TokenBridgeInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): TokenBridge {
    return new Contract(address, _abi, signerOrProvider) as TokenBridge;
  }
}
