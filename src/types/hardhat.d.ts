/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { ethers } from "ethers";
import {
  FactoryOptions,
  HardhatEthersHelpers as HardhatEthersHelpersBase,
} from "@nomiclabs/hardhat-ethers/types";

import * as Contracts from ".";

declare module "hardhat/types/runtime" {
  interface HardhatEthersHelpers extends HardhatEthersHelpersBase {
    getContractFactory(
      name: "AxelarExecutable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AxelarExecutable__factory>;
    getContractFactory(
      name: "IAxelarExecutable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IAxelarExecutable__factory>;
    getContractFactory(
      name: "IAxelarGasService",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IAxelarGasService__factory>;
    getContractFactory(
      name: "IAxelarGateway",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IAxelarGateway__factory>;
    getContractFactory(
      name: "IContractIdentifier",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IContractIdentifier__factory>;
    getContractFactory(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20__factory>;
    getContractFactory(
      name: "IGovernable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IGovernable__factory>;
    getContractFactory(
      name: "IImplementation",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IImplementation__factory>;
    getContractFactory(
      name: "IInterchainGasEstimation",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IInterchainGasEstimation__factory>;
    getContractFactory(
      name: "IOwnable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IOwnable__factory>;
    getContractFactory(
      name: "IProxy",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IProxy__factory>;
    getContractFactory(
      name: "IUpgradable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IUpgradable__factory>;
    getContractFactory(
      name: "StringToAddress",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.StringToAddress__factory>;
    getContractFactory(
      name: "BaseProxy",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BaseProxy__factory>;
    getContractFactory(
      name: "Implementation",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Implementation__factory>;
    getContractFactory(
      name: "Proxy",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Proxy__factory>;
    getContractFactory(
      name: "Upgradable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Upgradable__factory>;
    getContractFactory(
      name: "Ownable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Ownable__factory>;
    getContractFactory(
      name: "Initializable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Initializable__factory>;
    getContractFactory(
      name: "AccessControl",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AccessControl__factory>;
    getContractFactory(
      name: "IAccessControl",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IAccessControl__factory>;
    getContractFactory(
      name: "Ownable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Ownable__factory>;
    getContractFactory(
      name: "IERC1822Proxiable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC1822Proxiable__factory>;
    getContractFactory(
      name: "IERC1967",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC1967__factory>;
    getContractFactory(
      name: "IERC4906",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC4906__factory>;
    getContractFactory(
      name: "IERC5267",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC5267__factory>;
    getContractFactory(
      name: "BeaconProxy",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BeaconProxy__factory>;
    getContractFactory(
      name: "IBeacon",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IBeacon__factory>;
    getContractFactory(
      name: "UpgradeableBeacon",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.UpgradeableBeacon__factory>;
    getContractFactory(
      name: "ERC1967Upgrade",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC1967Upgrade__factory>;
    getContractFactory(
      name: "Proxy",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Proxy__factory>;
    getContractFactory(
      name: "ERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20__factory>;
    getContractFactory(
      name: "ERC20Burnable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20Burnable__factory>;
    getContractFactory(
      name: "ERC20Permit",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20Permit__factory>;
    getContractFactory(
      name: "IERC20Metadata",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20Metadata__factory>;
    getContractFactory(
      name: "IERC20Permit",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20Permit__factory>;
    getContractFactory(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20__factory>;
    getContractFactory(
      name: "ERC721",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC721__factory>;
    getContractFactory(
      name: "ERC721URIStorage",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC721URIStorage__factory>;
    getContractFactory(
      name: "IERC721Metadata",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC721Metadata__factory>;
    getContractFactory(
      name: "IERC721",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC721__factory>;
    getContractFactory(
      name: "IERC721Receiver",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC721Receiver__factory>;
    getContractFactory(
      name: "EIP712",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.EIP712__factory>;
    getContractFactory(
      name: "ERC165",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC165__factory>;
    getContractFactory(
      name: "IERC165",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC165__factory>;
    getContractFactory(
      name: "ShortStrings",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ShortStrings__factory>;
    getContractFactory(
      name: "Airdrop",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Airdrop__factory>;
    getContractFactory(
      name: "CallContractWithToken",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.CallContractWithToken__factory>;
    getContractFactory(
      name: "CallContract",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.CallContract__factory>;
    getContractFactory(
      name: "Hash",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Hash__factory>;
    getContractFactory(
      name: "HTLC",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.HTLC__factory>;
    getContractFactory(
      name: "Migrations",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Migrations__factory>;
    getContractFactory(
      name: "Token",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Token__factory>;
    getContractFactory(
      name: "BridgeA",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BridgeA__factory>;
    getContractFactory(
      name: "BridgeB",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BridgeB__factory>;
    getContractFactory(
      name: "AuctionFactoryC",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AuctionFactoryC__factory>;
    getContractFactory(
      name: "AuctionObjectToken",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AuctionObjectToken__factory>;
    getContractFactory(
      name: "ECTools",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ECTools__factory>;
    getContractFactory(
      name: "ZkVickreyAuctionC",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ZkVickreyAuctionC__factory>;
    getContractFactory(
      name: "ContestContract",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ContestContract__factory>;
    getContractFactory(
      name: "Migrations",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Migrations__factory>;
    getContractFactory(
      name: "EllipticCurve",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.EllipticCurve__factory>;
    getContractFactory(
      name: "EllipticCurveInterface",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.EllipticCurveInterface__factory>;
    getContractFactory(
      name: "PedersenContract",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.PedersenContract__factory>;
    getContractFactory(
      name: "LockReleaseProtocol",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.LockReleaseProtocol__factory>;
    getContractFactory(
      name: "Storage",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Storage__factory>;
    getContractFactory(
      name: "TokenA",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TokenA__factory>;
    getContractFactory(
      name: "TokenB",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TokenB__factory>;
    getContractFactory(
      name: "ProxyBidder",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ProxyBidder__factory>;
    getContractFactory(
      name: "VickreyAuction",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.VickreyAuction__factory>;
    getContractFactory(
      name: "VickreyAuctionTester",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.VickreyAuctionTester__factory>;
    getContractFactory(
      name: "SumsToFifteen",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SumsToFifteen__factory>;
    getContractFactory(
      name: "Verifier",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Verifier__factory>;
    getContractFactory(
      name: "SimpleCustomToken",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SimpleCustomToken__factory>;
    getContractFactory(
      name: "ERC20Token",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20Token__factory>;
    getContractFactory(
      name: "Marketplace",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Marketplace__factory>;
    getContractFactory(
      name: "ERC721Demo",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC721Demo__factory>;
    getContractFactory(
      name: "NftLinker",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.NftLinker__factory>;
    getContractFactory(
      name: "ExampleProxy",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ExampleProxy__factory>;
    getContractFactory(
      name: "NFT",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.NFT__factory>;
    getContractFactory(
      name: "RPSGame",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.RPSGame__factory>;
    getContractFactory(
      name: "RPSServer",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.RPSServer__factory>;
    getContractFactory(
      name: "SenderReceiver",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SenderReceiver__factory>;
    getContractFactory(
      name: "SenderReceiver",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SenderReceiver__factory>;
    getContractFactory(
      name: "MessageContract",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MessageContract__factory>;
    getContractFactory(
      name: "Messaging",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Messaging__factory>;
    getContractFactory(
      name: "TokenA",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TokenA__factory>;
    getContractFactory(
      name: "TokenB",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TokenB__factory>;
    getContractFactory(
      name: "ITokenB",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ITokenB__factory>;
    getContractFactory(
      name: "TokenBridge",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TokenBridge__factory>;

    getContractAt(
      name: "AxelarExecutable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.AxelarExecutable>;
    getContractAt(
      name: "IAxelarExecutable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IAxelarExecutable>;
    getContractAt(
      name: "IAxelarGasService",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IAxelarGasService>;
    getContractAt(
      name: "IAxelarGateway",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IAxelarGateway>;
    getContractAt(
      name: "IContractIdentifier",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IContractIdentifier>;
    getContractAt(
      name: "IERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20>;
    getContractAt(
      name: "IGovernable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IGovernable>;
    getContractAt(
      name: "IImplementation",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IImplementation>;
    getContractAt(
      name: "IInterchainGasEstimation",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IInterchainGasEstimation>;
    getContractAt(
      name: "IOwnable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IOwnable>;
    getContractAt(
      name: "IProxy",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IProxy>;
    getContractAt(
      name: "IUpgradable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IUpgradable>;
    getContractAt(
      name: "StringToAddress",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.StringToAddress>;
    getContractAt(
      name: "BaseProxy",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.BaseProxy>;
    getContractAt(
      name: "Implementation",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Implementation>;
    getContractAt(
      name: "Proxy",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Proxy>;
    getContractAt(
      name: "Upgradable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Upgradable>;
    getContractAt(
      name: "Ownable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Ownable>;
    getContractAt(
      name: "Initializable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Initializable>;
    getContractAt(
      name: "AccessControl",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.AccessControl>;
    getContractAt(
      name: "IAccessControl",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IAccessControl>;
    getContractAt(
      name: "Ownable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Ownable>;
    getContractAt(
      name: "IERC1822Proxiable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC1822Proxiable>;
    getContractAt(
      name: "IERC1967",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC1967>;
    getContractAt(
      name: "IERC4906",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC4906>;
    getContractAt(
      name: "IERC5267",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC5267>;
    getContractAt(
      name: "BeaconProxy",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.BeaconProxy>;
    getContractAt(
      name: "IBeacon",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IBeacon>;
    getContractAt(
      name: "UpgradeableBeacon",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.UpgradeableBeacon>;
    getContractAt(
      name: "ERC1967Upgrade",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC1967Upgrade>;
    getContractAt(
      name: "Proxy",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Proxy>;
    getContractAt(
      name: "ERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20>;
    getContractAt(
      name: "ERC20Burnable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20Burnable>;
    getContractAt(
      name: "ERC20Permit",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20Permit>;
    getContractAt(
      name: "IERC20Metadata",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20Metadata>;
    getContractAt(
      name: "IERC20Permit",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20Permit>;
    getContractAt(
      name: "IERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20>;
    getContractAt(
      name: "ERC721",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC721>;
    getContractAt(
      name: "ERC721URIStorage",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC721URIStorage>;
    getContractAt(
      name: "IERC721Metadata",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC721Metadata>;
    getContractAt(
      name: "IERC721",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC721>;
    getContractAt(
      name: "IERC721Receiver",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC721Receiver>;
    getContractAt(
      name: "EIP712",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.EIP712>;
    getContractAt(
      name: "ERC165",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC165>;
    getContractAt(
      name: "IERC165",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC165>;
    getContractAt(
      name: "ShortStrings",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ShortStrings>;
    getContractAt(
      name: "Airdrop",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Airdrop>;
    getContractAt(
      name: "CallContractWithToken",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.CallContractWithToken>;
    getContractAt(
      name: "CallContract",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.CallContract>;
    getContractAt(
      name: "Hash",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Hash>;
    getContractAt(
      name: "HTLC",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.HTLC>;
    getContractAt(
      name: "Migrations",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Migrations>;
    getContractAt(
      name: "Token",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Token>;
    getContractAt(
      name: "BridgeA",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.BridgeA>;
    getContractAt(
      name: "BridgeB",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.BridgeB>;
    getContractAt(
      name: "AuctionFactoryC",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.AuctionFactoryC>;
    getContractAt(
      name: "AuctionObjectToken",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.AuctionObjectToken>;
    getContractAt(
      name: "ECTools",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ECTools>;
    getContractAt(
      name: "ZkVickreyAuctionC",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ZkVickreyAuctionC>;
    getContractAt(
      name: "ContestContract",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ContestContract>;
    getContractAt(
      name: "Migrations",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Migrations>;
    getContractAt(
      name: "EllipticCurve",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.EllipticCurve>;
    getContractAt(
      name: "EllipticCurveInterface",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.EllipticCurveInterface>;
    getContractAt(
      name: "PedersenContract",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.PedersenContract>;
    getContractAt(
      name: "LockReleaseProtocol",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.LockReleaseProtocol>;
    getContractAt(
      name: "Storage",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Storage>;
    getContractAt(
      name: "TokenA",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TokenA>;
    getContractAt(
      name: "TokenB",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TokenB>;
    getContractAt(
      name: "ProxyBidder",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ProxyBidder>;
    getContractAt(
      name: "VickreyAuction",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.VickreyAuction>;
    getContractAt(
      name: "VickreyAuctionTester",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.VickreyAuctionTester>;
    getContractAt(
      name: "SumsToFifteen",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.SumsToFifteen>;
    getContractAt(
      name: "Verifier",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Verifier>;
    getContractAt(
      name: "SimpleCustomToken",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.SimpleCustomToken>;
    getContractAt(
      name: "ERC20Token",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20Token>;
    getContractAt(
      name: "Marketplace",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Marketplace>;
    getContractAt(
      name: "ERC721Demo",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC721Demo>;
    getContractAt(
      name: "NftLinker",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.NftLinker>;
    getContractAt(
      name: "ExampleProxy",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ExampleProxy>;
    getContractAt(
      name: "NFT",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.NFT>;
    getContractAt(
      name: "RPSGame",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.RPSGame>;
    getContractAt(
      name: "RPSServer",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.RPSServer>;
    getContractAt(
      name: "SenderReceiver",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.SenderReceiver>;
    getContractAt(
      name: "SenderReceiver",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.SenderReceiver>;
    getContractAt(
      name: "MessageContract",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MessageContract>;
    getContractAt(
      name: "Messaging",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Messaging>;
    getContractAt(
      name: "TokenA",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TokenA>;
    getContractAt(
      name: "TokenB",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TokenB>;
    getContractAt(
      name: "ITokenB",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ITokenB>;
    getContractAt(
      name: "TokenBridge",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TokenBridge>;

    // default types
    getContractFactory(
      name: string,
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<ethers.ContractFactory>;
    getContractFactory(
      abi: any[],
      bytecode: ethers.utils.BytesLike,
      signer?: ethers.Signer
    ): Promise<ethers.ContractFactory>;
    getContractAt(
      nameOrAbi: string | any[],
      address: string,
      signer?: ethers.Signer
    ): Promise<ethers.Contract>;
  }
}
