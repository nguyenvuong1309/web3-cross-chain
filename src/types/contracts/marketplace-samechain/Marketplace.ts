/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export declare namespace Marketplace {
  export type ItemStruct = {
    itemId: PromiseOrValue<BigNumberish>;
    nft: PromiseOrValue<string>;
    tokenId: PromiseOrValue<BigNumberish>;
    price: PromiseOrValue<BigNumberish>;
    seller: PromiseOrValue<string>;
    sold: PromiseOrValue<boolean>;
  };

  export type ItemStructOutput = [
    BigNumber,
    string,
    BigNumber,
    BigNumber,
    string,
    boolean
  ] & {
    itemId: BigNumber;
    nft: string;
    tokenId: BigNumber;
    price: BigNumber;
    seller: string;
    sold: boolean;
  };
}

export interface MarketplaceInterface extends utils.Interface {
  functions: {
    "feeAccount()": FunctionFragment;
    "feePercent()": FunctionFragment;
    "getAllItems()": FunctionFragment;
    "getItem(uint256)": FunctionFragment;
    "getTotalPrice(uint256)": FunctionFragment;
    "itemCount()": FunctionFragment;
    "items(uint256)": FunctionFragment;
    "makeItem(address,uint256,uint256)": FunctionFragment;
    "purchaseItem(uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "feeAccount"
      | "feePercent"
      | "getAllItems"
      | "getItem"
      | "getTotalPrice"
      | "itemCount"
      | "items"
      | "makeItem"
      | "purchaseItem"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "feeAccount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "feePercent",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAllItems",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getItem",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalPrice",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "itemCount", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "items",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "makeItem",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "purchaseItem",
    values: [PromiseOrValue<BigNumberish>]
  ): string;

  decodeFunctionResult(functionFragment: "feeAccount", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "feePercent", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getAllItems",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getItem", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getTotalPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "itemCount", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "items", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "makeItem", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "purchaseItem",
    data: BytesLike
  ): Result;

  events: {
    "Bought(uint256,address,uint256,uint256,address,address)": EventFragment;
    "Offered(uint256,address,uint256,uint256,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Bought"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Offered"): EventFragment;
}

export interface BoughtEventObject {
  itemId: BigNumber;
  nft: string;
  tokenId: BigNumber;
  price: BigNumber;
  seller: string;
  buyer: string;
}
export type BoughtEvent = TypedEvent<
  [BigNumber, string, BigNumber, BigNumber, string, string],
  BoughtEventObject
>;

export type BoughtEventFilter = TypedEventFilter<BoughtEvent>;

export interface OfferedEventObject {
  itemId: BigNumber;
  nft: string;
  tokenId: BigNumber;
  price: BigNumber;
  seller: string;
}
export type OfferedEvent = TypedEvent<
  [BigNumber, string, BigNumber, BigNumber, string],
  OfferedEventObject
>;

export type OfferedEventFilter = TypedEventFilter<OfferedEvent>;

export interface Marketplace extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: MarketplaceInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    feeAccount(overrides?: CallOverrides): Promise<[string]>;

    feePercent(overrides?: CallOverrides): Promise<[BigNumber]>;

    getAllItems(
      overrides?: CallOverrides
    ): Promise<[Marketplace.ItemStructOutput[]]>;

    getItem(
      _itemId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[Marketplace.ItemStructOutput]>;

    getTotalPrice(
      _itemId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    itemCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    items(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, string, BigNumber, BigNumber, string, boolean] & {
        itemId: BigNumber;
        nft: string;
        tokenId: BigNumber;
        price: BigNumber;
        seller: string;
        sold: boolean;
      }
    >;

    makeItem(
      _nft: PromiseOrValue<string>,
      _tokenId: PromiseOrValue<BigNumberish>,
      _price: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    purchaseItem(
      _itemId: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  feeAccount(overrides?: CallOverrides): Promise<string>;

  feePercent(overrides?: CallOverrides): Promise<BigNumber>;

  getAllItems(
    overrides?: CallOverrides
  ): Promise<Marketplace.ItemStructOutput[]>;

  getItem(
    _itemId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<Marketplace.ItemStructOutput>;

  getTotalPrice(
    _itemId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  itemCount(overrides?: CallOverrides): Promise<BigNumber>;

  items(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, string, BigNumber, BigNumber, string, boolean] & {
      itemId: BigNumber;
      nft: string;
      tokenId: BigNumber;
      price: BigNumber;
      seller: string;
      sold: boolean;
    }
  >;

  makeItem(
    _nft: PromiseOrValue<string>,
    _tokenId: PromiseOrValue<BigNumberish>,
    _price: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  purchaseItem(
    _itemId: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    feeAccount(overrides?: CallOverrides): Promise<string>;

    feePercent(overrides?: CallOverrides): Promise<BigNumber>;

    getAllItems(
      overrides?: CallOverrides
    ): Promise<Marketplace.ItemStructOutput[]>;

    getItem(
      _itemId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<Marketplace.ItemStructOutput>;

    getTotalPrice(
      _itemId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    itemCount(overrides?: CallOverrides): Promise<BigNumber>;

    items(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, string, BigNumber, BigNumber, string, boolean] & {
        itemId: BigNumber;
        nft: string;
        tokenId: BigNumber;
        price: BigNumber;
        seller: string;
        sold: boolean;
      }
    >;

    makeItem(
      _nft: PromiseOrValue<string>,
      _tokenId: PromiseOrValue<BigNumberish>,
      _price: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    purchaseItem(
      _itemId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "Bought(uint256,address,uint256,uint256,address,address)"(
      itemId?: null,
      nft?: PromiseOrValue<string> | null,
      tokenId?: null,
      price?: null,
      seller?: PromiseOrValue<string> | null,
      buyer?: PromiseOrValue<string> | null
    ): BoughtEventFilter;
    Bought(
      itemId?: null,
      nft?: PromiseOrValue<string> | null,
      tokenId?: null,
      price?: null,
      seller?: PromiseOrValue<string> | null,
      buyer?: PromiseOrValue<string> | null
    ): BoughtEventFilter;

    "Offered(uint256,address,uint256,uint256,address)"(
      itemId?: null,
      nft?: PromiseOrValue<string> | null,
      tokenId?: null,
      price?: null,
      seller?: PromiseOrValue<string> | null
    ): OfferedEventFilter;
    Offered(
      itemId?: null,
      nft?: PromiseOrValue<string> | null,
      tokenId?: null,
      price?: null,
      seller?: PromiseOrValue<string> | null
    ): OfferedEventFilter;
  };

  estimateGas: {
    feeAccount(overrides?: CallOverrides): Promise<BigNumber>;

    feePercent(overrides?: CallOverrides): Promise<BigNumber>;

    getAllItems(overrides?: CallOverrides): Promise<BigNumber>;

    getItem(
      _itemId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTotalPrice(
      _itemId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    itemCount(overrides?: CallOverrides): Promise<BigNumber>;

    items(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    makeItem(
      _nft: PromiseOrValue<string>,
      _tokenId: PromiseOrValue<BigNumberish>,
      _price: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    purchaseItem(
      _itemId: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    feeAccount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    feePercent(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getAllItems(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getItem(
      _itemId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTotalPrice(
      _itemId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    itemCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    items(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    makeItem(
      _nft: PromiseOrValue<string>,
      _tokenId: PromiseOrValue<BigNumberish>,
      _price: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    purchaseItem(
      _itemId: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
