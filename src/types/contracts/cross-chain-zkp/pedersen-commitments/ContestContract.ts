/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../common";

export interface ContestContractInterface extends utils.Interface {
  functions: {
    "minter()": FunctionFragment;
    "startDate()": FunctionFragment;
    "status()": FunctionFragment;
    "pedersenAddr()": FunctionFragment;
    "submissions(address)": FunctionFragment;
    "dataUri()": FunctionFragment;
    "problemUri()": FunctionFragment;
    "endDate()": FunctionFragment;
    "submit(uint256,uint256,uint32)": FunctionFragment;
    "validate(address,uint256,uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "minter"
      | "startDate"
      | "status"
      | "pedersenAddr"
      | "submissions"
      | "dataUri"
      | "problemUri"
      | "endDate"
      | "submit"
      | "validate"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "minter", values?: undefined): string;
  encodeFunctionData(functionFragment: "startDate", values?: undefined): string;
  encodeFunctionData(functionFragment: "status", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pedersenAddr",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "submissions",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "dataUri", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "problemUri",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "endDate", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "submit",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "validate",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;

  decodeFunctionResult(functionFragment: "minter", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "startDate", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "status", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pedersenAddr",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "submissions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "dataUri", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "problemUri", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "endDate", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "submit", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "validate", data: BytesLike): Result;

  events: {};
}

export interface ContestContract extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ContestContractInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    minter(overrides?: CallOverrides): Promise<[string]>;

    startDate(overrides?: CallOverrides): Promise<[BigNumber]>;

    status(
      overrides?: CallOverrides
    ): Promise<[number, boolean] & { benchmark: number; validated: boolean }>;

    pedersenAddr(overrides?: CallOverrides): Promise<[string]>;

    submissions(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, number, boolean] & {
        firstCommit: BigNumber;
        secondCommit: BigNumber;
        benchmark: number;
        validated: boolean;
      }
    >;

    dataUri(overrides?: CallOverrides): Promise<[string]>;

    problemUri(overrides?: CallOverrides): Promise<[string]>;

    endDate(overrides?: CallOverrides): Promise<[BigNumber]>;

    submit(
      firstCommit: PromiseOrValue<BigNumberish>,
      secondCommit: PromiseOrValue<BigNumberish>,
      benchmark: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    validate(
      addr: PromiseOrValue<string>,
      r: PromiseOrValue<BigNumberish>,
      v: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  minter(overrides?: CallOverrides): Promise<string>;

  startDate(overrides?: CallOverrides): Promise<BigNumber>;

  status(
    overrides?: CallOverrides
  ): Promise<[number, boolean] & { benchmark: number; validated: boolean }>;

  pedersenAddr(overrides?: CallOverrides): Promise<string>;

  submissions(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, number, boolean] & {
      firstCommit: BigNumber;
      secondCommit: BigNumber;
      benchmark: number;
      validated: boolean;
    }
  >;

  dataUri(overrides?: CallOverrides): Promise<string>;

  problemUri(overrides?: CallOverrides): Promise<string>;

  endDate(overrides?: CallOverrides): Promise<BigNumber>;

  submit(
    firstCommit: PromiseOrValue<BigNumberish>,
    secondCommit: PromiseOrValue<BigNumberish>,
    benchmark: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  validate(
    addr: PromiseOrValue<string>,
    r: PromiseOrValue<BigNumberish>,
    v: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    minter(overrides?: CallOverrides): Promise<string>;

    startDate(overrides?: CallOverrides): Promise<BigNumber>;

    status(
      overrides?: CallOverrides
    ): Promise<[number, boolean] & { benchmark: number; validated: boolean }>;

    pedersenAddr(overrides?: CallOverrides): Promise<string>;

    submissions(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, number, boolean] & {
        firstCommit: BigNumber;
        secondCommit: BigNumber;
        benchmark: number;
        validated: boolean;
      }
    >;

    dataUri(overrides?: CallOverrides): Promise<string>;

    problemUri(overrides?: CallOverrides): Promise<string>;

    endDate(overrides?: CallOverrides): Promise<BigNumber>;

    submit(
      firstCommit: PromiseOrValue<BigNumberish>,
      secondCommit: PromiseOrValue<BigNumberish>,
      benchmark: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    validate(
      addr: PromiseOrValue<string>,
      r: PromiseOrValue<BigNumberish>,
      v: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    minter(overrides?: CallOverrides): Promise<BigNumber>;

    startDate(overrides?: CallOverrides): Promise<BigNumber>;

    status(overrides?: CallOverrides): Promise<BigNumber>;

    pedersenAddr(overrides?: CallOverrides): Promise<BigNumber>;

    submissions(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    dataUri(overrides?: CallOverrides): Promise<BigNumber>;

    problemUri(overrides?: CallOverrides): Promise<BigNumber>;

    endDate(overrides?: CallOverrides): Promise<BigNumber>;

    submit(
      firstCommit: PromiseOrValue<BigNumberish>,
      secondCommit: PromiseOrValue<BigNumberish>,
      benchmark: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    validate(
      addr: PromiseOrValue<string>,
      r: PromiseOrValue<BigNumberish>,
      v: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    minter(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    startDate(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    status(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pedersenAddr(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    submissions(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    dataUri(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    problemUri(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    endDate(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    submit(
      firstCommit: PromiseOrValue<BigNumberish>,
      secondCommit: PromiseOrValue<BigNumberish>,
      benchmark: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    validate(
      addr: PromiseOrValue<string>,
      r: PromiseOrValue<BigNumberish>,
      v: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
