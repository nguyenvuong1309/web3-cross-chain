/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../common";

export interface LockReleaseProtocolInterface extends utils.Interface {
  functions: {
    "MAX_DELAY()": FunctionFragment;
    "completeLock(uint256)": FunctionFragment;
    "initiateDispute(uint256)": FunctionFragment;
    "requestLock(address,uint256)": FunctionFragment;
    "requestRelease(uint256)": FunctionFragment;
    "transactions(uint256)": FunctionFragment;
    "txCounter()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "MAX_DELAY"
      | "completeLock"
      | "initiateDispute"
      | "requestLock"
      | "requestRelease"
      | "transactions"
      | "txCounter"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "MAX_DELAY", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "completeLock",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "initiateDispute",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "requestLock",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "requestRelease",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "transactions",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "txCounter", values?: undefined): string;

  decodeFunctionResult(functionFragment: "MAX_DELAY", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "completeLock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "initiateDispute",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requestLock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requestRelease",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transactions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "txCounter", data: BytesLike): Result;

  events: {
    "DisputeInitiated(uint256)": EventFragment;
    "LockCompleted(uint256)": EventFragment;
    "LockRequested(uint256,address,address,uint256,uint256)": EventFragment;
    "ReleaseCompleted(uint256)": EventFragment;
    "ReleaseRequested(uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "DisputeInitiated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LockCompleted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LockRequested"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ReleaseCompleted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ReleaseRequested"): EventFragment;
}

export interface DisputeInitiatedEventObject {
  txId: BigNumber;
}
export type DisputeInitiatedEvent = TypedEvent<
  [BigNumber],
  DisputeInitiatedEventObject
>;

export type DisputeInitiatedEventFilter =
  TypedEventFilter<DisputeInitiatedEvent>;

export interface LockCompletedEventObject {
  txId: BigNumber;
}
export type LockCompletedEvent = TypedEvent<
  [BigNumber],
  LockCompletedEventObject
>;

export type LockCompletedEventFilter = TypedEventFilter<LockCompletedEvent>;

export interface LockRequestedEventObject {
  txId: BigNumber;
  payer: string;
  intermediary: string;
  value: BigNumber;
  fee: BigNumber;
}
export type LockRequestedEvent = TypedEvent<
  [BigNumber, string, string, BigNumber, BigNumber],
  LockRequestedEventObject
>;

export type LockRequestedEventFilter = TypedEventFilter<LockRequestedEvent>;

export interface ReleaseCompletedEventObject {
  txId: BigNumber;
}
export type ReleaseCompletedEvent = TypedEvent<
  [BigNumber],
  ReleaseCompletedEventObject
>;

export type ReleaseCompletedEventFilter =
  TypedEventFilter<ReleaseCompletedEvent>;

export interface ReleaseRequestedEventObject {
  txId: BigNumber;
}
export type ReleaseRequestedEvent = TypedEvent<
  [BigNumber],
  ReleaseRequestedEventObject
>;

export type ReleaseRequestedEventFilter =
  TypedEventFilter<ReleaseRequestedEvent>;

export interface LockReleaseProtocol extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: LockReleaseProtocolInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    MAX_DELAY(overrides?: CallOverrides): Promise<[BigNumber]>;

    completeLock(
      _txId: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    initiateDispute(
      _txId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    requestLock(
      _intermediary: PromiseOrValue<string>,
      _fee: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    requestRelease(
      _txId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    transactions(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        boolean,
        boolean,
        boolean
      ] & {
        payer: string;
        intermediary: string;
        value: BigNumber;
        fee: BigNumber;
        collateral: BigNumber;
        timestamp: BigNumber;
        isLocked: boolean;
        isReleased: boolean;
        isDisputed: boolean;
      }
    >;

    txCounter(overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  MAX_DELAY(overrides?: CallOverrides): Promise<BigNumber>;

  completeLock(
    _txId: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  initiateDispute(
    _txId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  requestLock(
    _intermediary: PromiseOrValue<string>,
    _fee: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  requestRelease(
    _txId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  transactions(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [
      string,
      string,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      boolean,
      boolean,
      boolean
    ] & {
      payer: string;
      intermediary: string;
      value: BigNumber;
      fee: BigNumber;
      collateral: BigNumber;
      timestamp: BigNumber;
      isLocked: boolean;
      isReleased: boolean;
      isDisputed: boolean;
    }
  >;

  txCounter(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    MAX_DELAY(overrides?: CallOverrides): Promise<BigNumber>;

    completeLock(
      _txId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    initiateDispute(
      _txId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    requestLock(
      _intermediary: PromiseOrValue<string>,
      _fee: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    requestRelease(
      _txId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    transactions(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        boolean,
        boolean,
        boolean
      ] & {
        payer: string;
        intermediary: string;
        value: BigNumber;
        fee: BigNumber;
        collateral: BigNumber;
        timestamp: BigNumber;
        isLocked: boolean;
        isReleased: boolean;
        isDisputed: boolean;
      }
    >;

    txCounter(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {
    "DisputeInitiated(uint256)"(
      txId?: PromiseOrValue<BigNumberish> | null
    ): DisputeInitiatedEventFilter;
    DisputeInitiated(
      txId?: PromiseOrValue<BigNumberish> | null
    ): DisputeInitiatedEventFilter;

    "LockCompleted(uint256)"(
      txId?: PromiseOrValue<BigNumberish> | null
    ): LockCompletedEventFilter;
    LockCompleted(
      txId?: PromiseOrValue<BigNumberish> | null
    ): LockCompletedEventFilter;

    "LockRequested(uint256,address,address,uint256,uint256)"(
      txId?: PromiseOrValue<BigNumberish> | null,
      payer?: PromiseOrValue<string> | null,
      intermediary?: PromiseOrValue<string> | null,
      value?: null,
      fee?: null
    ): LockRequestedEventFilter;
    LockRequested(
      txId?: PromiseOrValue<BigNumberish> | null,
      payer?: PromiseOrValue<string> | null,
      intermediary?: PromiseOrValue<string> | null,
      value?: null,
      fee?: null
    ): LockRequestedEventFilter;

    "ReleaseCompleted(uint256)"(
      txId?: PromiseOrValue<BigNumberish> | null
    ): ReleaseCompletedEventFilter;
    ReleaseCompleted(
      txId?: PromiseOrValue<BigNumberish> | null
    ): ReleaseCompletedEventFilter;

    "ReleaseRequested(uint256)"(
      txId?: PromiseOrValue<BigNumberish> | null
    ): ReleaseRequestedEventFilter;
    ReleaseRequested(
      txId?: PromiseOrValue<BigNumberish> | null
    ): ReleaseRequestedEventFilter;
  };

  estimateGas: {
    MAX_DELAY(overrides?: CallOverrides): Promise<BigNumber>;

    completeLock(
      _txId: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    initiateDispute(
      _txId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    requestLock(
      _intermediary: PromiseOrValue<string>,
      _fee: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    requestRelease(
      _txId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    transactions(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    txCounter(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    MAX_DELAY(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    completeLock(
      _txId: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    initiateDispute(
      _txId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    requestLock(
      _intermediary: PromiseOrValue<string>,
      _fee: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    requestRelease(
      _txId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    transactions(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    txCounter(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
