/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../../common";

export declare namespace AuctionFactoryC {
  export type AuctionStruct = {
    auction_id: PromiseOrValue<BigNumberish>;
    name: PromiseOrValue<string>;
    owner_address: PromiseOrValue<string>;
    auction_proxy: PromiseOrValue<string>;
    url: PromiseOrValue<string>;
  };

  export type AuctionStructOutput = [
    BigNumber,
    string,
    string,
    string,
    string
  ] & {
    auction_id: BigNumber;
    name: string;
    owner_address: string;
    auction_proxy: string;
    url: string;
  };
}

export interface AuctionFactoryCInterface extends utils.Interface {
  functions: {
    "allAuctions()": FunctionFragment;
    "auctionProxies(address)": FunctionFragment;
    "auctioneers(address)": FunctionFragment;
    "banBidder(address)": FunctionFragment;
    "bannedBidders(address)": FunctionFragment;
    "changeBeaconImplementation(address)": FunctionFragment;
    "createAuction(string,address,uint256,uint256,uint256,uint256,string,address)": FunctionFragment;
    "isBidderBanned(address)": FunctionFragment;
    "logicContract()": FunctionFragment;
    "register()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "allAuctions"
      | "auctionProxies"
      | "auctioneers"
      | "banBidder"
      | "bannedBidders"
      | "changeBeaconImplementation"
      | "createAuction"
      | "isBidderBanned"
      | "logicContract"
      | "register"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "allAuctions",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "auctionProxies",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "auctioneers",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "banBidder",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "bannedBidders",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "changeBeaconImplementation",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "createAuction",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "isBidderBanned",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "logicContract",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "register", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "allAuctions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "auctionProxies",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "auctioneers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "banBidder", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "bannedBidders",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "changeBeaconImplementation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createAuction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isBidderBanned",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "logicContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "register", data: BytesLike): Result;

  events: {
    "AuctionCreated(string,address)": EventFragment;
    "Upgraded(address)": EventFragment;
    "senderEvent(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AuctionCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Upgraded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "senderEvent"): EventFragment;
}

export interface AuctionCreatedEventObject {
  name: string;
  addr: string;
}
export type AuctionCreatedEvent = TypedEvent<
  [string, string],
  AuctionCreatedEventObject
>;

export type AuctionCreatedEventFilter = TypedEventFilter<AuctionCreatedEvent>;

export interface UpgradedEventObject {
  implementation: string;
}
export type UpgradedEvent = TypedEvent<[string], UpgradedEventObject>;

export type UpgradedEventFilter = TypedEventFilter<UpgradedEvent>;

export interface senderEventEventObject {
  adrr: string;
}
export type senderEventEvent = TypedEvent<[string], senderEventEventObject>;

export type senderEventEventFilter = TypedEventFilter<senderEventEvent>;

export interface AuctionFactoryC extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: AuctionFactoryCInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    allAuctions(
      overrides?: CallOverrides
    ): Promise<[AuctionFactoryC.AuctionStructOutput[]]>;

    auctionProxies(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    auctioneers(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    banBidder(
      bidder: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    bannedBidders(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    changeBeaconImplementation(
      implementation: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    createAuction(
      name: PromiseOrValue<string>,
      _owner_address: PromiseOrValue<string>,
      _min_fee: PromiseOrValue<BigNumberish>,
      _bid_period: PromiseOrValue<BigNumberish>,
      _reveal_period: PromiseOrValue<BigNumberish>,
      _max_bidders: PromiseOrValue<BigNumberish>,
      _url: PromiseOrValue<string>,
      _token_address: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    isBidderBanned(
      bidder: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    logicContract(overrides?: CallOverrides): Promise<[string]>;

    register(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  allAuctions(
    overrides?: CallOverrides
  ): Promise<AuctionFactoryC.AuctionStructOutput[]>;

  auctionProxies(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  auctioneers(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  banBidder(
    bidder: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  bannedBidders(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  changeBeaconImplementation(
    implementation: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  createAuction(
    name: PromiseOrValue<string>,
    _owner_address: PromiseOrValue<string>,
    _min_fee: PromiseOrValue<BigNumberish>,
    _bid_period: PromiseOrValue<BigNumberish>,
    _reveal_period: PromiseOrValue<BigNumberish>,
    _max_bidders: PromiseOrValue<BigNumberish>,
    _url: PromiseOrValue<string>,
    _token_address: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  isBidderBanned(
    bidder: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  logicContract(overrides?: CallOverrides): Promise<string>;

  register(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    allAuctions(
      overrides?: CallOverrides
    ): Promise<AuctionFactoryC.AuctionStructOutput[]>;

    auctionProxies(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    auctioneers(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    banBidder(
      bidder: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    bannedBidders(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    changeBeaconImplementation(
      implementation: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    createAuction(
      name: PromiseOrValue<string>,
      _owner_address: PromiseOrValue<string>,
      _min_fee: PromiseOrValue<BigNumberish>,
      _bid_period: PromiseOrValue<BigNumberish>,
      _reveal_period: PromiseOrValue<BigNumberish>,
      _max_bidders: PromiseOrValue<BigNumberish>,
      _url: PromiseOrValue<string>,
      _token_address: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    isBidderBanned(
      bidder: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    logicContract(overrides?: CallOverrides): Promise<string>;

    register(overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "AuctionCreated(string,address)"(
      name?: null,
      addr?: PromiseOrValue<string> | null
    ): AuctionCreatedEventFilter;
    AuctionCreated(
      name?: null,
      addr?: PromiseOrValue<string> | null
    ): AuctionCreatedEventFilter;

    "Upgraded(address)"(implementation?: null): UpgradedEventFilter;
    Upgraded(implementation?: null): UpgradedEventFilter;

    "senderEvent(address)"(adrr?: null): senderEventEventFilter;
    senderEvent(adrr?: null): senderEventEventFilter;
  };

  estimateGas: {
    allAuctions(overrides?: CallOverrides): Promise<BigNumber>;

    auctionProxies(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    auctioneers(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    banBidder(
      bidder: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    bannedBidders(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    changeBeaconImplementation(
      implementation: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    createAuction(
      name: PromiseOrValue<string>,
      _owner_address: PromiseOrValue<string>,
      _min_fee: PromiseOrValue<BigNumberish>,
      _bid_period: PromiseOrValue<BigNumberish>,
      _reveal_period: PromiseOrValue<BigNumberish>,
      _max_bidders: PromiseOrValue<BigNumberish>,
      _url: PromiseOrValue<string>,
      _token_address: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    isBidderBanned(
      bidder: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    logicContract(overrides?: CallOverrides): Promise<BigNumber>;

    register(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    allAuctions(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    auctionProxies(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    auctioneers(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    banBidder(
      bidder: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    bannedBidders(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    changeBeaconImplementation(
      implementation: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    createAuction(
      name: PromiseOrValue<string>,
      _owner_address: PromiseOrValue<string>,
      _min_fee: PromiseOrValue<BigNumberish>,
      _bid_period: PromiseOrValue<BigNumberish>,
      _reveal_period: PromiseOrValue<BigNumberish>,
      _max_bidders: PromiseOrValue<BigNumberish>,
      _url: PromiseOrValue<string>,
      _token_address: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    isBidderBanned(
      bidder: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    logicContract(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    register(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
