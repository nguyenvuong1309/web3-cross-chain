/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../../common";

export declare namespace ZkVickreyAuctionC {
  export type CommitStruct = {
    c1: PromiseOrValue<BigNumberish>;
    c2: PromiseOrValue<BigNumberish>;
    c3: PromiseOrValue<BigNumberish>;
  };

  export type CommitStructOutput = [BigNumber, BigNumber, BigNumber] & {
    c1: BigNumber;
    c2: BigNumber;
    c3: BigNumber;
  };
}

export interface ZkVickreyAuctionCInterface extends utils.Interface {
  functions: {
    "bid(uint256,uint256,uint256)": FunctionFragment;
    "claimReward()": FunctionFragment;
    "commits(address)": FunctionFragment;
    "getMetadata()": FunctionFragment;
    "initialize(address,uint256,uint256,uint256,uint256,uint256,string,address,address)": FunctionFragment;
    "max_bidder()": FunctionFragment;
    "register()": FunctionFragment;
    "second_max_bidder()": FunctionFragment;
    "testCommited()": FunctionFragment;
    "testRegistered()": FunctionFragment;
    "testVerification()": FunctionFragment;
    "verify(uint256,uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "bid"
      | "claimReward"
      | "commits"
      | "getMetadata"
      | "initialize"
      | "max_bidder"
      | "register"
      | "second_max_bidder"
      | "testCommited"
      | "testRegistered"
      | "testVerification"
      | "verify"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "bid",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "claimReward",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "commits",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getMetadata",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "max_bidder",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "register", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "second_max_bidder",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "testCommited",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "testRegistered",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "testVerification",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "verify",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;

  decodeFunctionResult(functionFragment: "bid", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "claimReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "commits", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getMetadata",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "max_bidder", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "register", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "second_max_bidder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testCommited",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testRegistered",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testVerification",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "verify", data: BytesLike): Result;

  events: {
    "ActualRegisters(address[])": EventFragment;
    "AuctionCommits(tuple[])": EventFragment;
    "AuctionMetadata(uint256,uint256,uint256)": EventFragment;
    "AuctionVerification(bytes32[])": EventFragment;
    "CommitEvent(tuple)": EventFragment;
    "Initialized(uint64)": EventFragment;
    "isBidderWinner(bool)": EventFragment;
    "isCommitVerified(bool)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ActualRegisters"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AuctionCommits"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AuctionMetadata"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AuctionVerification"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CommitEvent"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "isBidderWinner"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "isCommitVerified"): EventFragment;
}

export interface ActualRegistersEventObject {
  registers: string[];
}
export type ActualRegistersEvent = TypedEvent<
  [string[]],
  ActualRegistersEventObject
>;

export type ActualRegistersEventFilter = TypedEventFilter<ActualRegistersEvent>;

export interface AuctionCommitsEventObject {
  commits: ZkVickreyAuctionC.CommitStructOutput[];
}
export type AuctionCommitsEvent = TypedEvent<
  [ZkVickreyAuctionC.CommitStructOutput[]],
  AuctionCommitsEventObject
>;

export type AuctionCommitsEventFilter = TypedEventFilter<AuctionCommitsEvent>;

export interface AuctionMetadataEventObject {
  b_p: BigNumber;
  r_p: BigNumber;
  min_f: BigNumber;
}
export type AuctionMetadataEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber],
  AuctionMetadataEventObject
>;

export type AuctionMetadataEventFilter = TypedEventFilter<AuctionMetadataEvent>;

export interface AuctionVerificationEventObject {
  verifications: string[];
}
export type AuctionVerificationEvent = TypedEvent<
  [string[]],
  AuctionVerificationEventObject
>;

export type AuctionVerificationEventFilter =
  TypedEventFilter<AuctionVerificationEvent>;

export interface CommitEventEventObject {
  commit: ZkVickreyAuctionC.CommitStructOutput;
}
export type CommitEventEvent = TypedEvent<
  [ZkVickreyAuctionC.CommitStructOutput],
  CommitEventEventObject
>;

export type CommitEventEventFilter = TypedEventFilter<CommitEventEvent>;

export interface InitializedEventObject {
  version: BigNumber;
}
export type InitializedEvent = TypedEvent<[BigNumber], InitializedEventObject>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface isBidderWinnerEventObject {
  isWinner: boolean;
}
export type isBidderWinnerEvent = TypedEvent<
  [boolean],
  isBidderWinnerEventObject
>;

export type isBidderWinnerEventFilter = TypedEventFilter<isBidderWinnerEvent>;

export interface isCommitVerifiedEventObject {
  verified: boolean;
}
export type isCommitVerifiedEvent = TypedEvent<
  [boolean],
  isCommitVerifiedEventObject
>;

export type isCommitVerifiedEventFilter =
  TypedEventFilter<isCommitVerifiedEvent>;

export interface ZkVickreyAuctionC extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ZkVickreyAuctionCInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    bid(
      c1: PromiseOrValue<BigNumberish>,
      c2: PromiseOrValue<BigNumberish>,
      c3: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    claimReward(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    commits(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        c1: BigNumber;
        c2: BigNumber;
        c3: BigNumber;
      }
    >;

    getMetadata(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    initialize(
      _owner_address: PromiseOrValue<string>,
      _min_fee: PromiseOrValue<BigNumberish>,
      _open_time: PromiseOrValue<BigNumberish>,
      _bid_period: PromiseOrValue<BigNumberish>,
      _reveal_period: PromiseOrValue<BigNumberish>,
      _max_bidders: PromiseOrValue<BigNumberish>,
      _url: PromiseOrValue<string>,
      _factory_address: PromiseOrValue<string>,
      _token_address: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    max_bidder(
      overrides?: CallOverrides
    ): Promise<[string, BigNumber] & { bidder: string; value: BigNumber }>;

    register(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    second_max_bidder(
      overrides?: CallOverrides
    ): Promise<[string, BigNumber] & { bidder: string; value: BigNumber }>;

    testCommited(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    testRegistered(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    testVerification(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    verify(
      _r: PromiseOrValue<BigNumberish>,
      _m: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  bid(
    c1: PromiseOrValue<BigNumberish>,
    c2: PromiseOrValue<BigNumberish>,
    c3: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  claimReward(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  commits(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      c1: BigNumber;
      c2: BigNumber;
      c3: BigNumber;
    }
  >;

  getMetadata(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  initialize(
    _owner_address: PromiseOrValue<string>,
    _min_fee: PromiseOrValue<BigNumberish>,
    _open_time: PromiseOrValue<BigNumberish>,
    _bid_period: PromiseOrValue<BigNumberish>,
    _reveal_period: PromiseOrValue<BigNumberish>,
    _max_bidders: PromiseOrValue<BigNumberish>,
    _url: PromiseOrValue<string>,
    _factory_address: PromiseOrValue<string>,
    _token_address: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  max_bidder(
    overrides?: CallOverrides
  ): Promise<[string, BigNumber] & { bidder: string; value: BigNumber }>;

  register(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  second_max_bidder(
    overrides?: CallOverrides
  ): Promise<[string, BigNumber] & { bidder: string; value: BigNumber }>;

  testCommited(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  testRegistered(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  testVerification(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  verify(
    _r: PromiseOrValue<BigNumberish>,
    _m: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    bid(
      c1: PromiseOrValue<BigNumberish>,
      c2: PromiseOrValue<BigNumberish>,
      c3: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    claimReward(overrides?: CallOverrides): Promise<void>;

    commits(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        c1: BigNumber;
        c2: BigNumber;
        c3: BigNumber;
      }
    >;

    getMetadata(overrides?: CallOverrides): Promise<void>;

    initialize(
      _owner_address: PromiseOrValue<string>,
      _min_fee: PromiseOrValue<BigNumberish>,
      _open_time: PromiseOrValue<BigNumberish>,
      _bid_period: PromiseOrValue<BigNumberish>,
      _reveal_period: PromiseOrValue<BigNumberish>,
      _max_bidders: PromiseOrValue<BigNumberish>,
      _url: PromiseOrValue<string>,
      _factory_address: PromiseOrValue<string>,
      _token_address: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    max_bidder(
      overrides?: CallOverrides
    ): Promise<[string, BigNumber] & { bidder: string; value: BigNumber }>;

    register(overrides?: CallOverrides): Promise<boolean>;

    second_max_bidder(
      overrides?: CallOverrides
    ): Promise<[string, BigNumber] & { bidder: string; value: BigNumber }>;

    testCommited(overrides?: CallOverrides): Promise<void>;

    testRegistered(overrides?: CallOverrides): Promise<void>;

    testVerification(overrides?: CallOverrides): Promise<void>;

    verify(
      _r: PromiseOrValue<BigNumberish>,
      _m: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "ActualRegisters(address[])"(registers?: null): ActualRegistersEventFilter;
    ActualRegisters(registers?: null): ActualRegistersEventFilter;

    "AuctionCommits(tuple[])"(commits?: null): AuctionCommitsEventFilter;
    AuctionCommits(commits?: null): AuctionCommitsEventFilter;

    "AuctionMetadata(uint256,uint256,uint256)"(
      b_p?: null,
      r_p?: null,
      min_f?: null
    ): AuctionMetadataEventFilter;
    AuctionMetadata(
      b_p?: null,
      r_p?: null,
      min_f?: null
    ): AuctionMetadataEventFilter;

    "AuctionVerification(bytes32[])"(
      verifications?: null
    ): AuctionVerificationEventFilter;
    AuctionVerification(verifications?: null): AuctionVerificationEventFilter;

    "CommitEvent(tuple)"(commit?: null): CommitEventEventFilter;
    CommitEvent(commit?: null): CommitEventEventFilter;

    "Initialized(uint64)"(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;

    "isBidderWinner(bool)"(isWinner?: null): isBidderWinnerEventFilter;
    isBidderWinner(isWinner?: null): isBidderWinnerEventFilter;

    "isCommitVerified(bool)"(verified?: null): isCommitVerifiedEventFilter;
    isCommitVerified(verified?: null): isCommitVerifiedEventFilter;
  };

  estimateGas: {
    bid(
      c1: PromiseOrValue<BigNumberish>,
      c2: PromiseOrValue<BigNumberish>,
      c3: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    claimReward(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    commits(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMetadata(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    initialize(
      _owner_address: PromiseOrValue<string>,
      _min_fee: PromiseOrValue<BigNumberish>,
      _open_time: PromiseOrValue<BigNumberish>,
      _bid_period: PromiseOrValue<BigNumberish>,
      _reveal_period: PromiseOrValue<BigNumberish>,
      _max_bidders: PromiseOrValue<BigNumberish>,
      _url: PromiseOrValue<string>,
      _factory_address: PromiseOrValue<string>,
      _token_address: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    max_bidder(overrides?: CallOverrides): Promise<BigNumber>;

    register(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    second_max_bidder(overrides?: CallOverrides): Promise<BigNumber>;

    testCommited(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    testRegistered(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    testVerification(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    verify(
      _r: PromiseOrValue<BigNumberish>,
      _m: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    bid(
      c1: PromiseOrValue<BigNumberish>,
      c2: PromiseOrValue<BigNumberish>,
      c3: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    claimReward(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    commits(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMetadata(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    initialize(
      _owner_address: PromiseOrValue<string>,
      _min_fee: PromiseOrValue<BigNumberish>,
      _open_time: PromiseOrValue<BigNumberish>,
      _bid_period: PromiseOrValue<BigNumberish>,
      _reveal_period: PromiseOrValue<BigNumberish>,
      _max_bidders: PromiseOrValue<BigNumberish>,
      _url: PromiseOrValue<string>,
      _factory_address: PromiseOrValue<string>,
      _token_address: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    max_bidder(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    register(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    second_max_bidder(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    testCommited(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    testRegistered(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    testVerification(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    verify(
      _r: PromiseOrValue<BigNumberish>,
      _m: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
