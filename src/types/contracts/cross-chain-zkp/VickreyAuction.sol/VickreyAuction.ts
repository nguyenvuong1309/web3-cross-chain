/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../common";

export interface VickreyAuctionInterface extends utils.Interface {
  functions: {
    "_secondHighestBidValue()": FunctionFragment;
    "finalize()": FunctionFragment;
    "_highestBidValue()": FunctionFragment;
    "overrideTime(uint256)": FunctionFragment;
    "bids(address)": FunctionFragment;
    "commitBid(bytes32)": FunctionFragment;
    "makeCommitment(bytes32,uint256)": FunctionFragment;
    "revealBid(bytes32)": FunctionFragment;
    "_testTime()": FunctionFragment;
    "_highestBidder()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "_secondHighestBidValue"
      | "finalize"
      | "_highestBidValue"
      | "overrideTime"
      | "bids"
      | "commitBid"
      | "makeCommitment"
      | "revealBid"
      | "_testTime"
      | "_highestBidder"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "_secondHighestBidValue",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "finalize", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "_highestBidValue",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "overrideTime",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "bids",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "commitBid",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "makeCommitment",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "revealBid",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(functionFragment: "_testTime", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "_highestBidder",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "_secondHighestBidValue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "finalize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "_highestBidValue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "overrideTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "bids", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "commitBid", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "makeCommitment",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revealBid", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "_testTime", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "_highestBidder",
    data: BytesLike
  ): Result;

  events: {};
}

export interface VickreyAuction extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: VickreyAuctionInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    _secondHighestBidValue(overrides?: CallOverrides): Promise<[BigNumber]>;

    finalize(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    _highestBidValue(overrides?: CallOverrides): Promise<[BigNumber]>;

    overrideTime(
      time: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    bids(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    commitBid(
      bidCommitment: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    makeCommitment(
      nonce: PromiseOrValue<BytesLike>,
      bidValue: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    revealBid(
      nonce: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    _testTime(overrides?: CallOverrides): Promise<[BigNumber]>;

    _highestBidder(overrides?: CallOverrides): Promise<[string]>;
  };

  _secondHighestBidValue(overrides?: CallOverrides): Promise<BigNumber>;

  finalize(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  _highestBidValue(overrides?: CallOverrides): Promise<BigNumber>;

  overrideTime(
    time: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  bids(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string>;

  commitBid(
    bidCommitment: PromiseOrValue<BytesLike>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  makeCommitment(
    nonce: PromiseOrValue<BytesLike>,
    bidValue: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  revealBid(
    nonce: PromiseOrValue<BytesLike>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  _testTime(overrides?: CallOverrides): Promise<BigNumber>;

  _highestBidder(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    _secondHighestBidValue(overrides?: CallOverrides): Promise<BigNumber>;

    finalize(overrides?: CallOverrides): Promise<void>;

    _highestBidValue(overrides?: CallOverrides): Promise<BigNumber>;

    overrideTime(
      time: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    bids(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    commitBid(
      bidCommitment: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    makeCommitment(
      nonce: PromiseOrValue<BytesLike>,
      bidValue: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    revealBid(
      nonce: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    _testTime(overrides?: CallOverrides): Promise<BigNumber>;

    _highestBidder(overrides?: CallOverrides): Promise<string>;
  };

  filters: {};

  estimateGas: {
    _secondHighestBidValue(overrides?: CallOverrides): Promise<BigNumber>;

    finalize(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    _highestBidValue(overrides?: CallOverrides): Promise<BigNumber>;

    overrideTime(
      time: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    bids(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    commitBid(
      bidCommitment: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    makeCommitment(
      nonce: PromiseOrValue<BytesLike>,
      bidValue: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    revealBid(
      nonce: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    _testTime(overrides?: CallOverrides): Promise<BigNumber>;

    _highestBidder(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    _secondHighestBidValue(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    finalize(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    _highestBidValue(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    overrideTime(
      time: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    bids(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    commitBid(
      bidCommitment: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    makeCommitment(
      nonce: PromiseOrValue<BytesLike>,
      bidValue: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    revealBid(
      nonce: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    _testTime(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    _highestBidder(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
